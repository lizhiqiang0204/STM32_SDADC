
SDADC_Injected.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004420  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004610  08004610  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004610  08004610  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004610  08004610  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001100  20000010  08004628  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001110  08004628  00021110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8a0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002884  00000000  00000000  0002e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  00031168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  00031d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018551  00000000  00000000  00032840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000baa6  00000000  00000000  0004ad91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089bb2  00000000  00000000  00056837  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e03e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e7c  00000000  00000000  000e0464  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004598 	.word	0x08004598

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004598 	.word	0x08004598

080001d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80001d6:	4b10      	ldr	r3, [pc, #64]	; (8000218 <MX_DMA_Init+0x48>)
 80001d8:	695b      	ldr	r3, [r3, #20]
 80001da:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <MX_DMA_Init+0x48>)
 80001dc:	f043 0302 	orr.w	r3, r3, #2
 80001e0:	6153      	str	r3, [r2, #20]
 80001e2:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <MX_DMA_Init+0x48>)
 80001e4:	695b      	ldr	r3, [r3, #20]
 80001e6:	f003 0302 	and.w	r3, r3, #2
 80001ea:	607b      	str	r3, [r7, #4]
 80001ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2100      	movs	r1, #0
 80001f2:	203a      	movs	r0, #58	; 0x3a
 80001f4:	f000 fd71 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80001f8:	203a      	movs	r0, #58	; 0x3a
 80001fa:	f000 fd8a 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2100      	movs	r1, #0
 8000202:	203c      	movs	r0, #60	; 0x3c
 8000204:	f000 fd69 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000208:	203c      	movs	r0, #60	; 0x3c
 800020a:	f000 fd82 	bl	8000d12 <HAL_NVIC_EnableIRQ>

}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000

0800021c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	4a07      	ldr	r2, [pc, #28]	; (8000248 <vApplicationGetIdleTaskMemory+0x2c>)
 800022c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4a06      	ldr	r2, [pc, #24]	; (800024c <vApplicationGetIdleTaskMemory+0x30>)
 8000232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2280      	movs	r2, #128	; 0x80
 8000238:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <MX_FREERTOS_Init+0x30>)
 8000258:	1d3c      	adds	r4, r7, #4
 800025a:	461d      	mov	r5, r3
 800025c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f002 ff46 	bl	80030fe <osThreadCreate>
 8000272:	4602      	mov	r2, r0
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <MX_FREERTOS_Init+0x34>)
 8000276:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000278:	bf00      	nop
 800027a:	3720      	adds	r7, #32
 800027c:	46bd      	mov	sp, r7
 800027e:	bdb0      	pop	{r4, r5, r7, pc}
 8000280:	080045bc 	.word	0x080045bc
 8000284:	20000ff8 	.word	0x20000ff8

08000288 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_SDADC_InjectedStart_DMA(&hsdadc3,SDADC3_DegitalValue,5) == HAL_OK)
 8000290:	2205      	movs	r2, #5
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <StartDefaultTask+0x68>)
 8000294:	4817      	ldr	r0, [pc, #92]	; (80002f4 <StartDefaultTask+0x6c>)
 8000296:	f002 fcef 	bl	8002c78 <HAL_SDADC_InjectedStart_DMA>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d10d      	bne.n	80002bc <StartDefaultTask+0x34>
	{
		while(IsFinishDMA2_Channel5 == 0)
 80002a0:	e002      	b.n	80002a8 <StartDefaultTask+0x20>
			osDelay(1);//等待DMA转换完成
 80002a2:	2001      	movs	r0, #1
 80002a4:	f002 ff77 	bl	8003196 <osDelay>
		while(IsFinishDMA2_Channel5 == 0)
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <StartDefaultTask+0x70>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0f8      	beq.n	80002a2 <StartDefaultTask+0x1a>
		IsFinishDMA2_Channel5 = 0;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <StartDefaultTask+0x70>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
		HAL_SDADC_InjectedStop_DMA(&hsdadc3);
 80002b6:	480f      	ldr	r0, [pc, #60]	; (80002f4 <StartDefaultTask+0x6c>)
 80002b8:	f002 fd5e 	bl	8002d78 <HAL_SDADC_InjectedStop_DMA>
	}

	if(HAL_SDADC_InjectedStart_DMA(&hsdadc1,SDADC1_DegitalValue,5) == HAL_OK)
 80002bc:	2205      	movs	r2, #5
 80002be:	490f      	ldr	r1, [pc, #60]	; (80002fc <StartDefaultTask+0x74>)
 80002c0:	480f      	ldr	r0, [pc, #60]	; (8000300 <StartDefaultTask+0x78>)
 80002c2:	f002 fcd9 	bl	8002c78 <HAL_SDADC_InjectedStart_DMA>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d10d      	bne.n	80002e8 <StartDefaultTask+0x60>
	{
		while(IsFinishDMA2_Channel3 == 0)
 80002cc:	e002      	b.n	80002d4 <StartDefaultTask+0x4c>
			osDelay(1);//等待DMA转换完成
 80002ce:	2001      	movs	r0, #1
 80002d0:	f002 ff61 	bl	8003196 <osDelay>
		while(IsFinishDMA2_Channel3 == 0)
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <StartDefaultTask+0x7c>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f8      	beq.n	80002ce <StartDefaultTask+0x46>
		IsFinishDMA2_Channel3 = 0;
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <StartDefaultTask+0x7c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
		HAL_SDADC_InjectedStop_DMA(&hsdadc1);
 80002e2:	4807      	ldr	r0, [pc, #28]	; (8000300 <StartDefaultTask+0x78>)
 80002e4:	f002 fd48 	bl	8002d78 <HAL_SDADC_InjectedStop_DMA>
	}
    osDelay(1);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f002 ff54 	bl	8003196 <osDelay>
	if(HAL_SDADC_InjectedStart_DMA(&hsdadc3,SDADC3_DegitalValue,5) == HAL_OK)
 80002ee:	e7cf      	b.n	8000290 <StartDefaultTask+0x8>
 80002f0:	20000294 	.word	0x20000294
 80002f4:	200010c8 	.word	0x200010c8
 80002f8:	200002a9 	.word	0x200002a9
 80002fc:	20000280 	.word	0x20000280
 8000300:	20001084 	.word	0x20001084
 8000304:	200002a8 	.word	0x200002a8

08000308 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	4b1b      	ldr	r3, [pc, #108]	; (800037c <MX_GPIO_Init+0x74>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a1a      	ldr	r2, [pc, #104]	; (800037c <MX_GPIO_Init+0x74>)
 8000314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_GPIO_Init+0x74>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_GPIO_Init+0x74>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a14      	ldr	r2, [pc, #80]	; (800037c <MX_GPIO_Init+0x74>)
 800032c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_GPIO_Init+0x74>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_GPIO_Init+0x74>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a0e      	ldr	r2, [pc, #56]	; (800037c <MX_GPIO_Init+0x74>)
 8000344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_GPIO_Init+0x74>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_GPIO_Init+0x74>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a08      	ldr	r2, [pc, #32]	; (800037c <MX_GPIO_Init+0x74>)
 800035c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_GPIO_Init+0x74>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]

}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000384:	f000 fb46 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000388:	f000 f80d 	bl	80003a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038c:	f7ff ffbc 	bl	8000308 <MX_GPIO_Init>
  MX_DMA_Init();
 8000390:	f7ff ff1e 	bl	80001d0 <MX_DMA_Init>
  MX_SDADC1_Init();
 8000394:	f000 f86e 	bl	8000474 <MX_SDADC1_Init>
  MX_SDADC3_Init();
 8000398:	f000 f902 	bl	80005a0 <MX_SDADC3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800039c:	f7ff ff58 	bl	8000250 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80003a0:	f002 fea6 	bl	80030f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x24>

080003a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b09a      	sub	sp, #104	; 0x68
 80003aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003b0:	2228      	movs	r2, #40	; 0x28
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f004 f8e7 	bl	8004588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ca:	463b      	mov	r3, r7
 80003cc:	222c      	movs	r2, #44	; 0x2c
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f004 f8d9 	bl	8004588 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d6:	2302      	movs	r3, #2
 80003d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003da:	2301      	movs	r3, #1
 80003dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003de:	2310      	movs	r3, #16
 80003e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e6:	2300      	movs	r3, #0
 80003e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003ee:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 f82d 	bl	8001454 <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000400:	f000 f831 	bl	8000466 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	2302      	movs	r3, #2
 800040a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800041e:	2102      	movs	r1, #2
 8000420:	4618      	mov	r0, r3
 8000422:	f001 ff1f 	bl	8002264 <HAL_RCC_ClockConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800042c:	f000 f81b 	bl	8000466 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDADC;
 8000430:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000434:	603b      	str	r3, [r7, #0]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV16;
 8000436:	f04f 4338 	mov.w	r3, #3087007744	; 0xb8000000
 800043a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043c:	463b      	mov	r3, r7
 800043e:	4618      	mov	r0, r3
 8000440:	f002 f8f6 	bl	8002630 <HAL_RCCEx_PeriphCLKConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800044a:	f000 f80c 	bl	8000466 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 800044e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000452:	f000 ffdf 	bl	8001414 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8000456:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800045a:	f000 ffdb 	bl	8001414 <HAL_PWREx_EnableSDADC>
}
 800045e:	bf00      	nop
 8000460:	3768      	adds	r7, #104	; 0x68
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <MX_SDADC1_Init>:
DMA_HandleTypeDef hdma_sdadc1;
DMA_HandleTypeDef hdma_sdadc3;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 800047a:	463b      	mov	r3, r7
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8000486:	4b3f      	ldr	r3, [pc, #252]	; (8000584 <MX_SDADC1_Init+0x110>)
 8000488:	4a3f      	ldr	r2, [pc, #252]	; (8000588 <MX_SDADC1_Init+0x114>)
 800048a:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 800048c:	4b3d      	ldr	r3, [pc, #244]	; (8000584 <MX_SDADC1_Init+0x110>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8000492:	4b3c      	ldr	r3, [pc, #240]	; (8000584 <MX_SDADC1_Init+0x110>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000498:	4b3a      	ldr	r3, [pc, #232]	; (8000584 <MX_SDADC1_Init+0x110>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800049e:	4b39      	ldr	r3, [pc, #228]	; (8000584 <MX_SDADC1_Init+0x110>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 80004a4:	4b37      	ldr	r3, [pc, #220]	; (8000584 <MX_SDADC1_Init+0x110>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80004aa:	4836      	ldr	r0, [pc, #216]	; (8000584 <MX_SDADC1_Init+0x110>)
 80004ac:	f002 fa34 	bl	8002918 <HAL_SDADC_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_SDADC1_Init+0x46>
  {
    Error_Handler();
 80004b6:	f7ff ffd6 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 80004ba:	2100      	movs	r1, #0
 80004bc:	4831      	ldr	r0, [pc, #196]	; (8000584 <MX_SDADC1_Init+0x110>)
 80004be:	f002 fba7 	bl	8002c10 <HAL_SDADC_SelectInjectedDelay>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_SDADC1_Init+0x58>
  {
    Error_Handler();
 80004c8:	f7ff ffcd 	bl	8000466 <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 80004cc:	2100      	movs	r1, #0
 80004ce:	482d      	ldr	r0, [pc, #180]	; (8000584 <MX_SDADC1_Init+0x110>)
 80004d0:	f002 fb6e 	bl	8002bb0 <HAL_SDADC_SelectInjectedTrigger>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_SDADC1_Init+0x6a>
  {
    Error_Handler();
 80004da:	f7ff ffc4 	bl	8000466 <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_0|SDADC_CHANNEL_2
 80004de:	2201      	movs	r2, #1
 80004e0:	492a      	ldr	r1, [pc, #168]	; (800058c <MX_SDADC1_Init+0x118>)
 80004e2:	4828      	ldr	r0, [pc, #160]	; (8000584 <MX_SDADC1_Init+0x110>)
 80004e4:	f002 fb28 	bl	8002b38 <HAL_SDADC_InjectedConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_SDADC1_Init+0x7e>
                              |SDADC_CHANNEL_4|SDADC_CHANNEL_6
                              |SDADC_CHANNEL_8, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
 80004ee:	f7ff ffba 	bl	8000466 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 80004f2:	2300      	movs	r3, #0
 80004f4:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000502:	463b      	mov	r3, r7
 8000504:	461a      	mov	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	481e      	ldr	r0, [pc, #120]	; (8000584 <MX_SDADC1_Init+0x110>)
 800050a:	f002 fa89 	bl	8002a20 <HAL_SDADC_PrepareChannelConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_SDADC1_Init+0xa4>
  {
    Error_Handler();
 8000514:	f7ff ffa7 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_0, SDADC_CONF_INDEX_0) != HAL_OK)
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	4819      	ldr	r0, [pc, #100]	; (8000584 <MX_SDADC1_Init+0x110>)
 800051e:	f002 fabb 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_SDADC1_Init+0xb8>
  {
    Error_Handler();
 8000528:	f7ff ff9d 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_2, SDADC_CONF_INDEX_0) != HAL_OK)
 800052c:	2200      	movs	r2, #0
 800052e:	4918      	ldr	r1, [pc, #96]	; (8000590 <MX_SDADC1_Init+0x11c>)
 8000530:	4814      	ldr	r0, [pc, #80]	; (8000584 <MX_SDADC1_Init+0x110>)
 8000532:	f002 fab1 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_SDADC1_Init+0xcc>
  {
    Error_Handler();
 800053c:	f7ff ff93 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 8000540:	2200      	movs	r2, #0
 8000542:	4914      	ldr	r1, [pc, #80]	; (8000594 <MX_SDADC1_Init+0x120>)
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <MX_SDADC1_Init+0x110>)
 8000546:	f002 faa7 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_SDADC1_Init+0xe0>
  {
    Error_Handler();
 8000550:	f7ff ff89 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8000554:	2200      	movs	r2, #0
 8000556:	4910      	ldr	r1, [pc, #64]	; (8000598 <MX_SDADC1_Init+0x124>)
 8000558:	480a      	ldr	r0, [pc, #40]	; (8000584 <MX_SDADC1_Init+0x110>)
 800055a:	f002 fa9d 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_SDADC1_Init+0xf4>
  {
    Error_Handler();
 8000564:	f7ff ff7f 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8000568:	2200      	movs	r2, #0
 800056a:	490c      	ldr	r1, [pc, #48]	; (800059c <MX_SDADC1_Init+0x128>)
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_SDADC1_Init+0x110>)
 800056e:	f002 fa93 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_SDADC1_Init+0x108>
  {
    Error_Handler();
 8000578:	f7ff ff75 	bl	8000466 <Error_Handler>
  }

}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20001084 	.word	0x20001084
 8000588:	40016000 	.word	0x40016000
 800058c:	000e0155 	.word	0x000e0155
 8000590:	00020004 	.word	0x00020004
 8000594:	00040010 	.word	0x00040010
 8000598:	00060040 	.word	0x00060040
 800059c:	00080100 	.word	0x00080100

080005a0 <MX_SDADC3_Init>:
/* SDADC3 init function */
void MX_SDADC3_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 80005b2:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005b4:	4a3f      	ldr	r2, [pc, #252]	; (80006b4 <MX_SDADC3_Init+0x114>)
 80005b6:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80005b8:	4b3d      	ldr	r3, [pc, #244]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 80005be:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80005c4:	4b3a      	ldr	r3, [pc, #232]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80005ca:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hsdadc3.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 80005d0:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 80005d6:	4836      	ldr	r0, [pc, #216]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005d8:	f002 f99e 	bl	8002918 <HAL_SDADC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_SDADC3_Init+0x46>
  {
    Error_Handler();
 80005e2:	f7ff ff40 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc3, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4831      	ldr	r0, [pc, #196]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005ea:	f002 fb11 	bl	8002c10 <HAL_SDADC_SelectInjectedDelay>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_SDADC3_Init+0x58>
  {
    Error_Handler();
 80005f4:	f7ff ff37 	bl	8000466 <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc3, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 80005f8:	2100      	movs	r1, #0
 80005fa:	482d      	ldr	r0, [pc, #180]	; (80006b0 <MX_SDADC3_Init+0x110>)
 80005fc:	f002 fad8 	bl	8002bb0 <HAL_SDADC_SelectInjectedTrigger>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_SDADC3_Init+0x6a>
  {
    Error_Handler();
 8000606:	f7ff ff2e 	bl	8000466 <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc3, SDADC_CHANNEL_0|SDADC_CHANNEL_2
 800060a:	2201      	movs	r2, #1
 800060c:	492a      	ldr	r1, [pc, #168]	; (80006b8 <MX_SDADC3_Init+0x118>)
 800060e:	4828      	ldr	r0, [pc, #160]	; (80006b0 <MX_SDADC3_Init+0x110>)
 8000610:	f002 fa92 	bl	8002b38 <HAL_SDADC_InjectedConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_SDADC3_Init+0x7e>
                              |SDADC_CHANNEL_4|SDADC_CHANNEL_6
                              |SDADC_CHANNEL_8, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
  {
    Error_Handler();
 800061a:	f7ff ff24 	bl	8000466 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_DIFF;
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	461a      	mov	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	481e      	ldr	r0, [pc, #120]	; (80006b0 <MX_SDADC3_Init+0x110>)
 8000636:	f002 f9f3 	bl	8002a20 <HAL_SDADC_PrepareChannelConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_SDADC3_Init+0xa4>
  {
    Error_Handler();
 8000640:	f7ff ff11 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_0, SDADC_CONF_INDEX_0) != HAL_OK)
 8000644:	2200      	movs	r2, #0
 8000646:	2101      	movs	r1, #1
 8000648:	4819      	ldr	r0, [pc, #100]	; (80006b0 <MX_SDADC3_Init+0x110>)
 800064a:	f002 fa25 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_SDADC3_Init+0xb8>
  {
    Error_Handler();
 8000654:	f7ff ff07 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_2, SDADC_CONF_INDEX_0) != HAL_OK)
 8000658:	2200      	movs	r2, #0
 800065a:	4918      	ldr	r1, [pc, #96]	; (80006bc <MX_SDADC3_Init+0x11c>)
 800065c:	4814      	ldr	r0, [pc, #80]	; (80006b0 <MX_SDADC3_Init+0x110>)
 800065e:	f002 fa1b 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_SDADC3_Init+0xcc>
  {
    Error_Handler();
 8000668:	f7ff fefd 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 800066c:	2200      	movs	r2, #0
 800066e:	4914      	ldr	r1, [pc, #80]	; (80006c0 <MX_SDADC3_Init+0x120>)
 8000670:	480f      	ldr	r0, [pc, #60]	; (80006b0 <MX_SDADC3_Init+0x110>)
 8000672:	f002 fa11 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_SDADC3_Init+0xe0>
  {
    Error_Handler();
 800067c:	f7ff fef3 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8000680:	2200      	movs	r2, #0
 8000682:	4910      	ldr	r1, [pc, #64]	; (80006c4 <MX_SDADC3_Init+0x124>)
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <MX_SDADC3_Init+0x110>)
 8000686:	f002 fa07 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_SDADC3_Init+0xf4>
  {
    Error_Handler();
 8000690:	f7ff fee9 	bl	8000466 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8000694:	2200      	movs	r2, #0
 8000696:	490c      	ldr	r1, [pc, #48]	; (80006c8 <MX_SDADC3_Init+0x128>)
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_SDADC3_Init+0x110>)
 800069a:	f002 f9fd 	bl	8002a98 <HAL_SDADC_AssociateChannelConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_SDADC3_Init+0x108>
  {
    Error_Handler();
 80006a4:	f7ff fedf 	bl	8000466 <Error_Handler>
  }

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200010c8 	.word	0x200010c8
 80006b4:	40016800 	.word	0x40016800
 80006b8:	000e0155 	.word	0x000e0155
 80006bc:	00020004 	.word	0x00020004
 80006c0:	00040010 	.word	0x00040010
 80006c4:	00060040 	.word	0x00060040
 80006c8:	00080100 	.word	0x00080100

080006cc <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(sdadcHandle->Instance==SDADC1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a6c      	ldr	r2, [pc, #432]	; (800089c <HAL_SDADC_MspInit+0x1d0>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d166      	bne.n	80007bc <HAL_SDADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* SDADC1 clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 80006ee:	4b6c      	ldr	r3, [pc, #432]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a6b      	ldr	r2, [pc, #428]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80006f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b69      	ldr	r3, [pc, #420]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000702:	623b      	str	r3, [r7, #32]
 8000704:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b66      	ldr	r3, [pc, #408]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a65      	ldr	r2, [pc, #404]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 800070c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b63      	ldr	r3, [pc, #396]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800071a:	61fb      	str	r3, [r7, #28]
 800071c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800071e:	4b60      	ldr	r3, [pc, #384]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a5f      	ldr	r2, [pc, #380]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 8000724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> SDADC1_AIN2P
    PE11     ------> SDADC1_AIN2M
    PE12     ------> SDADC1_AIN0P
    PE13     ------> SDADC1_AIN0M
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000736:	2307      	movs	r3, #7
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073a:	2303      	movs	r3, #3
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	4619      	mov	r1, r3
 8000748:	4856      	ldr	r0, [pc, #344]	; (80008a4 <HAL_SDADC_MspInit+0x1d8>)
 800074a:	f000 fce9 	bl	8001120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800074e:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000754:	2303      	movs	r3, #3
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	4619      	mov	r1, r3
 8000762:	4851      	ldr	r0, [pc, #324]	; (80008a8 <HAL_SDADC_MspInit+0x1dc>)
 8000764:	f000 fcdc 	bl	8001120 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 8000768:	4b50      	ldr	r3, [pc, #320]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 800076a:	4a51      	ldr	r2, [pc, #324]	; (80008b0 <HAL_SDADC_MspInit+0x1e4>)
 800076c:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800076e:	4b4f      	ldr	r3, [pc, #316]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000774:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 800077a:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000780:	4b4a      	ldr	r3, [pc, #296]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 8000782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000786:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 800078a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800078e:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_CIRCULAR;
 8000790:	4b46      	ldr	r3, [pc, #280]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 8000792:	2220      	movs	r2, #32
 8000794:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 8000798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800079c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 800079e:	4843      	ldr	r0, [pc, #268]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 80007a0:	f000 fad1 	bl	8000d46 <HAL_DMA_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_SDADC_MspInit+0xe2>
    {
      Error_Handler();
 80007aa:	f7ff fe5c 	bl	8000466 <Error_Handler>
    }

    __HAL_LINKDMA(sdadcHandle,hdma,hdma_sdadc1);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a3e      	ldr	r2, [pc, #248]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	4a3d      	ldr	r2, [pc, #244]	; (80008ac <HAL_SDADC_MspInit+0x1e0>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }
}
 80007ba:	e06b      	b.n	8000894 <HAL_SDADC_MspInit+0x1c8>
  else if(sdadcHandle->Instance==SDADC3)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a3c      	ldr	r2, [pc, #240]	; (80008b4 <HAL_SDADC_MspInit+0x1e8>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d166      	bne.n	8000894 <HAL_SDADC_MspInit+0x1c8>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a35      	ldr	r2, [pc, #212]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80007cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a2f      	ldr	r2, [pc, #188]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80007e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a29      	ldr	r2, [pc, #164]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 80007fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <HAL_SDADC_MspInit+0x1d4>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800080e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000814:	2303      	movs	r3, #3
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	4820      	ldr	r0, [pc, #128]	; (80008a4 <HAL_SDADC_MspInit+0x1d8>)
 8000824:	f000 fc7c 	bl	8001120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000828:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	481e      	ldr	r0, [pc, #120]	; (80008b8 <HAL_SDADC_MspInit+0x1ec>)
 800083e:	f000 fc6f 	bl	8001120 <HAL_GPIO_Init>
    hdma_sdadc3.Instance = DMA2_Channel5;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 8000844:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <HAL_SDADC_MspInit+0x1f4>)
 8000846:	601a      	str	r2, [r3, #0]
    hdma_sdadc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
    hdma_sdadc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
    hdma_sdadc3.Init.MemInc = DMA_MINC_ENABLE;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	60da      	str	r2, [r3, #12]
    hdma_sdadc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 800085c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000860:	611a      	str	r2, [r3, #16]
    hdma_sdadc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 8000864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000868:	615a      	str	r2, [r3, #20]
    hdma_sdadc3.Init.Mode = DMA_CIRCULAR;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 800086c:	2220      	movs	r2, #32
 800086e:	619a      	str	r2, [r3, #24]
    hdma_sdadc3.Init.Priority = DMA_PRIORITY_HIGH;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 8000872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000876:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc3) != HAL_OK)
 8000878:	4810      	ldr	r0, [pc, #64]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 800087a:	f000 fa64 	bl	8000d46 <HAL_DMA_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_SDADC_MspInit+0x1bc>
      Error_Handler();
 8000884:	f7ff fdef 	bl	8000466 <Error_Handler>
    __HAL_LINKDMA(sdadcHandle,hdma,hdma_sdadc3);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <HAL_SDADC_MspInit+0x1f0>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000894:	bf00      	nop
 8000896:	3738      	adds	r7, #56	; 0x38
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40016000 	.word	0x40016000
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400
 80008a8:	48001000 	.word	0x48001000
 80008ac:	20000ffc 	.word	0x20000ffc
 80008b0:	40020430 	.word	0x40020430
 80008b4:	40016800 	.word	0x40016800
 80008b8:	48000c00 	.word	0x48000c00
 80008bc:	20001040 	.word	0x20001040
 80008c0:	40020458 	.word	0x40020458

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x44>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_MspInit+0x44>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_MspInit+0x44>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x44>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x44>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x44>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8ac 	bl	8000aa0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000948:	f003 f99e 	bl	8003c88 <xTaskGetSchedulerState>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d001      	beq.n	8000956 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000952:	f003 fbd1 	bl	80040f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <DMA2_Channel3_IRQHandler+0x14>)
 8000962:	f000 facf 	bl	8000f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */
  IsFinishDMA2_Channel3 = 1;//DMA 转换完毕
 8000966:	4b03      	ldr	r3, [pc, #12]	; (8000974 <DMA2_Channel3_IRQHandler+0x18>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000ffc 	.word	0x20000ffc
 8000974:	200002a8 	.word	0x200002a8

08000978 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc3);
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <DMA2_Channel5_IRQHandler+0x14>)
 800097e:	f000 fac1 	bl	8000f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */
  IsFinishDMA2_Channel5 = 1;//DMA 转换完毕
 8000982:	4b03      	ldr	r3, [pc, #12]	; (8000990 <DMA2_Channel5_IRQHandler+0x18>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20001040 	.word	0x20001040
 8000990:	200002a9 	.word	0x200002a9

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <SystemInit+0x28>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <SystemInit+0x28>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SystemInit+0x28>)
 80009aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ae:	609a      	str	r2, [r3, #8]
#endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009c6:	e003      	b.n	80009d0 <LoopCopyDataInit>

080009c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009ce:	3104      	adds	r1, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009d8:	d3f6      	bcc.n	80009c8 <CopyDataInit>
	ldr	r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009dc:	e002      	b.n	80009e4 <LoopFillZerobss>

080009de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009e0:	f842 3b04 	str.w	r3, [r2], #4

080009e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <LoopForever+0x16>)
	cmp	r2, r3
 80009e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009e8:	d3f9      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ea:	f7ff ffd3 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f003 fda7 	bl	8004540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f2:	f7ff fcc5 	bl	8000380 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80009fc:	08004618 	.word	0x08004618
	ldr	r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a04:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000a08:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000a0c:	20001110 	.word	0x20001110

08000a10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x28>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f94d 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff ff48 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f965 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 f92d 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	2000110c 	.word	0x2000110c

08000ac8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;  
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000110c 	.word	0x2000110c

08000ae0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff ffee 	bl	8000ac8 <HAL_GetTick>
 8000aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af8:	d005      	beq.n	8000b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_Delay+0x40>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b06:	bf00      	nop
 8000b08:	f7ff ffde 	bl	8000ac8 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d8f7      	bhi.n	8000b08 <HAL_Delay+0x28>
  {
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000008 	.word	0x20000008

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <__NVIC_EnableIRQ+0x38>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff29 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff3e 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff31 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e037      	b.n	8000dcc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2202      	movs	r2, #2
 8000d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f97a 	bl	80010a8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
}  
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d101      	bne.n	8000df4 <HAL_DMA_Start_IT+0x20>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e04a      	b.n	8000e8a <HAL_DMA_Start_IT+0xb6>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2201      	movs	r2, #1
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d13a      	bne.n	8000e7c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2202      	movs	r2, #2
 8000e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2200      	movs	r2, #0
 8000e12:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f000 f90d 	bl	800104a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d008      	beq.n	8000e4a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 020e 	orr.w	r2, r2, #14
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e00f      	b.n	8000e6a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 020a 	orr.w	r2, r2, #10
 8000e58:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0204 	bic.w	r2, r2, #4
 8000e68:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 0201 	orr.w	r2, r2, #1
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e005      	b.n	8000e88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e84:	2302      	movs	r3, #2
 8000e86:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d008      	beq.n	8000eb6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e020      	b.n	8000ef8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 020e 	bic.w	r2, r2, #14
 8000ec4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2204      	movs	r2, #4
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d024      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x72>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d01f      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d107      	bne.n	8000f54 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0204 	bic.w	r2, r2, #4
 8000f52:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d06a      	beq.n	8001042 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f74:	e065      	b.n	8001042 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d02c      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0xdc>
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d027      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 020a 	bic.w	r2, r2, #10
 8000fac:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d035      	beq.n	8001042 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000fde:	e030      	b.n	8001042 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d028      	beq.n	8001042 <HAL_DMA_IRQHandler+0x13e>
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d023      	beq.n	8001042 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 020e 	bic.w	r2, r2, #14
 8001008:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	4798      	blx	r3
    }
  }
}  
 8001040:	e7ff      	b.n	8001042 <HAL_DMA_IRQHandler+0x13e>
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001060:	2101      	movs	r1, #1
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b10      	cmp	r3, #16
 8001076:	d108      	bne.n	800108a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001088:	e007      	b.n	800109a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	60da      	str	r2, [r3, #12]
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <DMA_CalcBaseAndBitshift+0x60>)
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d80f      	bhi.n	80010dc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <DMA_CalcBaseAndBitshift+0x64>)
 80010c4:	4413      	add	r3, r2
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <DMA_CalcBaseAndBitshift+0x68>)
 80010c8:	fba2 2303 	umull	r2, r3, r2, r3
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	009a      	lsls	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <DMA_CalcBaseAndBitshift+0x6c>)
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80010da:	e00e      	b.n	80010fa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <DMA_CalcBaseAndBitshift+0x70>)
 80010e4:	4413      	add	r3, r2
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <DMA_CalcBaseAndBitshift+0x68>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	009a      	lsls	r2, r3, #2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <DMA_CalcBaseAndBitshift+0x74>)
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40020407 	.word	0x40020407
 800110c:	bffdfff8 	.word	0xbffdfff8
 8001110:	cccccccd 	.word	0xcccccccd
 8001114:	40020000 	.word	0x40020000
 8001118:	bffdfbf8 	.word	0xbffdfbf8
 800111c:	40020400 	.word	0x40020400

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e154      	b.n	80013da <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8146 	beq.w	80013d4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d00b      	beq.n	8001168 <HAL_GPIO_Init+0x48>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115c:	2b11      	cmp	r3, #17
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b12      	cmp	r3, #18
 8001166:	d130      	bne.n	80011ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119e:	2201      	movs	r2, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 0201 	and.w	r2, r3, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0xea>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b12      	cmp	r3, #18
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0203 	and.w	r2, r3, #3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80a0 	beq.w	80013d4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <HAL_GPIO_Init+0x2d8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a57      	ldr	r2, [pc, #348]	; (80013f8 <HAL_GPIO_Init+0x2d8>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <HAL_GPIO_Init+0x2d8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ac:	4a53      	ldr	r2, [pc, #332]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012d6:	d019      	beq.n	800130c <HAL_GPIO_Init+0x1ec>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a49      	ldr	r2, [pc, #292]	; (8001400 <HAL_GPIO_Init+0x2e0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d013      	beq.n	8001308 <HAL_GPIO_Init+0x1e8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_GPIO_Init+0x2e4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d00d      	beq.n	8001304 <HAL_GPIO_Init+0x1e4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a47      	ldr	r2, [pc, #284]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d007      	beq.n	8001300 <HAL_GPIO_Init+0x1e0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a46      	ldr	r2, [pc, #280]	; (800140c <HAL_GPIO_Init+0x2ec>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d101      	bne.n	80012fc <HAL_GPIO_Init+0x1dc>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e008      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 80012fc:	2305      	movs	r3, #5
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 8001300:	2303      	movs	r3, #3
 8001302:	e004      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 8001304:	2302      	movs	r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 800130c:	2300      	movs	r3, #0
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	f002 0203 	and.w	r2, r2, #3
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	4093      	lsls	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131e:	4937      	ldr	r1, [pc, #220]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001350:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800137a:	4a25      	ldr	r2, [pc, #148]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013a4:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f47f aea3 	bne.w	8001130 <HAL_GPIO_Init+0x10>
  }
}
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	48000400 	.word	0x48000400
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	48001000 	.word	0x48001000
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_PWREx_EnableSDADC+0x38>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_PWREx_EnableSDADC+0x38>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	61d3      	str	r3, [r2, #28]
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_PWREx_EnableSDADC+0x38>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_PWREx_EnableSDADC+0x3c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4905      	ldr	r1, [pc, #20]	; (8001450 <HAL_PWREx_EnableSDADC+0x3c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40007000 	.word	0x40007000

08001454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800145a:	af00      	add	r7, sp, #0
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	f000 bef4 	b.w	8002256 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 816a 	beq.w	8001752 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800147e:	4bb3      	ldr	r3, [pc, #716]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d00c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148a:	4bb0      	ldr	r3, [pc, #704]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d159      	bne.n	800154a <HAL_RCC_OscConfig+0xf6>
 8001496:	4bad      	ldr	r3, [pc, #692]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d152      	bne.n	800154a <HAL_RCC_OscConfig+0xf6>
 80014a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014b0:	fa93 f3a3 	rbit	r3, r3
 80014b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d102      	bne.n	80014d6 <HAL_RCC_OscConfig+0x82>
 80014d0:	4b9e      	ldr	r3, [pc, #632]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	e015      	b.n	8001502 <HAL_RCC_OscConfig+0xae>
 80014d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80014fe:	4b93      	ldr	r3, [pc, #588]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001506:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800150a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800150e:	fa92 f2a2 	rbit	r2, r2
 8001512:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001516:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800151a:	fab2 f282 	clz	r2, r2
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f042 0220 	orr.w	r2, r2, #32
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f002 021f 	and.w	r2, r2, #31
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 810c 	beq.w	8001750 <HAL_RCC_OscConfig+0x2fc>
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 8106 	bne.w	8001750 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	f000 be86 	b.w	8002256 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d106      	bne.n	8001564 <HAL_RCC_OscConfig+0x110>
 8001556:	4b7d      	ldr	r3, [pc, #500]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a7c      	ldr	r2, [pc, #496]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e030      	b.n	80015c6 <HAL_RCC_OscConfig+0x172>
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x134>
 800156e:	4b77      	ldr	r3, [pc, #476]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a76      	ldr	r2, [pc, #472]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b74      	ldr	r3, [pc, #464]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a73      	ldr	r2, [pc, #460]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01e      	b.n	80015c6 <HAL_RCC_OscConfig+0x172>
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001592:	d10c      	bne.n	80015ae <HAL_RCC_OscConfig+0x15a>
 8001594:	4b6d      	ldr	r3, [pc, #436]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a6c      	ldr	r2, [pc, #432]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 800159a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b6a      	ldr	r3, [pc, #424]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a69      	ldr	r2, [pc, #420]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e00b      	b.n	80015c6 <HAL_RCC_OscConfig+0x172>
 80015ae:	4b67      	ldr	r3, [pc, #412]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a66      	ldr	r2, [pc, #408]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b64      	ldr	r3, [pc, #400]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a63      	ldr	r2, [pc, #396]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c6:	4b61      	ldr	r3, [pc, #388]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	f023 020f 	bic.w	r2, r3, #15
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	495d      	ldr	r1, [pc, #372]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d059      	beq.n	8001698 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fa70 	bl	8000ac8 <HAL_GetTick>
 80015e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ee:	f7ff fa6b 	bl	8000ac8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d902      	bls.n	8001604 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	f000 be29 	b.w	8002256 <HAL_RCC_OscConfig+0xe02>
 8001604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001608:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001618:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d102      	bne.n	8001636 <HAL_RCC_OscConfig+0x1e2>
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x20e>
 8001636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800164a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001652:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001666:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800166a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800166e:	fa92 f2a2 	rbit	r2, r2
 8001672:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001676:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800167a:	fab2 f282 	clz	r2, r2
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	f042 0220 	orr.w	r2, r2, #32
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f002 021f 	and.w	r2, r2, #31
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ab      	beq.n	80015ee <HAL_RCC_OscConfig+0x19a>
 8001696:	e05c      	b.n	8001752 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fa16 	bl	8000ac8 <HAL_GetTick>
 800169c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a2:	f7ff fa11 	bl	8000ac8 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d902      	bls.n	80016b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f000 bdcf 	b.w	8002256 <HAL_RCC_OscConfig+0xe02>
 80016b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0x296>
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	e015      	b.n	8001716 <HAL_RCC_OscConfig+0x2c2>
 80016ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001702:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001706:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_RCC_OscConfig+0x2f8>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800171a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800171e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001722:	fa92 f2a2 	rbit	r2, r2
 8001726:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800172a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800172e:	fab2 f282 	clz	r2, r2
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f042 0220 	orr.w	r2, r2, #32
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f002 021f 	and.w	r2, r2, #31
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1ab      	bne.n	80016a2 <HAL_RCC_OscConfig+0x24e>
 800174a:	e002      	b.n	8001752 <HAL_RCC_OscConfig+0x2fe>
 800174c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 816f 	beq.w	8001a40 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001762:	4bd0      	ldr	r3, [pc, #832]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800176e:	4bcd      	ldr	r3, [pc, #820]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	d16c      	bne.n	8001854 <HAL_RCC_OscConfig+0x400>
 800177a:	4bca      	ldr	r3, [pc, #808]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d166      	bne.n	8001854 <HAL_RCC_OscConfig+0x400>
 8001786:	2302      	movs	r3, #2
 8001788:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001798:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_OscConfig+0x362>
 80017b0:	4bbc      	ldr	r3, [pc, #752]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	e013      	b.n	80017de <HAL_RCC_OscConfig+0x38a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017c8:	2302      	movs	r3, #2
 80017ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017da:	4bb2      	ldr	r3, [pc, #712]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	2202      	movs	r2, #2
 80017e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017e8:	fa92 f2a2 	rbit	r2, r2
 80017ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80017f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80017f4:	fab2 f282 	clz	r2, r2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f042 0220 	orr.w	r2, r2, #32
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f002 021f 	and.w	r2, r2, #31
 8001804:	2101      	movs	r1, #1
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <HAL_RCC_OscConfig+0x3cc>
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d002      	beq.n	8001820 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f000 bd1b 	b.w	8002256 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4ba0      	ldr	r3, [pc, #640]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	21f8      	movs	r1, #248	; 0xf8
 8001830:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001838:	fa91 f1a1 	rbit	r1, r1
 800183c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001840:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001844:	fab1 f181 	clz	r1, r1
 8001848:	b2c9      	uxtb	r1, r1
 800184a:	408b      	lsls	r3, r1
 800184c:	4995      	ldr	r1, [pc, #596]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	e0f5      	b.n	8001a40 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8085 	beq.w	800196a <HAL_RCC_OscConfig+0x516>
 8001860:	2301      	movs	r3, #1
 8001862:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001872:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001880:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	461a      	mov	r2, r3
 8001888:	2301      	movs	r3, #1
 800188a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff f91c 	bl	8000ac8 <HAL_GetTick>
 8001890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff f917 	bl	8000ac8 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d902      	bls.n	80018ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f000 bcd5 	b.w	8002256 <HAL_RCC_OscConfig+0xe02>
 80018ac:	2302      	movs	r3, #2
 80018ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	095b      	lsrs	r3, r3, #5
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d102      	bne.n	80018dc <HAL_RCC_OscConfig+0x488>
 80018d6:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0x4b0>
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018e6:	fa93 f3a3 	rbit	r3, r3
 80018ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001900:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	2202      	movs	r2, #2
 8001906:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800190a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800190e:	fa92 f2a2 	rbit	r2, r2
 8001912:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001916:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800191a:	fab2 f282 	clz	r2, r2
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f042 0220 	orr.w	r2, r2, #32
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f002 021f 	and.w	r2, r2, #31
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0af      	beq.n	8001896 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	21f8      	movs	r1, #248	; 0xf8
 8001946:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800194e:	fa91 f1a1 	rbit	r1, r1
 8001952:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001956:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800195a:	fab1 f181 	clz	r1, r1
 800195e:	b2c9      	uxtb	r1, r1
 8001960:	408b      	lsls	r3, r1
 8001962:	4950      	ldr	r1, [pc, #320]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e06a      	b.n	8001a40 <HAL_RCC_OscConfig+0x5ec>
 800196a:	2301      	movs	r3, #1
 800196c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800197c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800198a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	2300      	movs	r3, #0
 8001994:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f897 	bl	8000ac8 <HAL_GetTick>
 800199a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff f892 	bl	8000ac8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d902      	bls.n	80019b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f000 bc50 	b.w	8002256 <HAL_RCC_OscConfig+0xe02>
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_OscConfig+0x592>
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e013      	b.n	8001a0e <HAL_RCC_OscConfig+0x5ba>
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_RCC_OscConfig+0x650>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a14:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a18:	fa92 f2a2 	rbit	r2, r2
 8001a1c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a24:	fab2 f282 	clz	r2, r2
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	f042 0220 	orr.w	r2, r2, #32
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f002 021f 	and.w	r2, r2, #31
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1af      	bne.n	80019a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80da 	beq.w	8001c04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d069      	beq.n	8001b2e <HAL_RCC_OscConfig+0x6da>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x654>)
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2301      	movs	r3, #1
 8001a82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff f820 	bl	8000ac8 <HAL_GetTick>
 8001a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8c:	e00e      	b.n	8001aac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f81b 	bl	8000ac8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d906      	bls.n	8001aac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e3d9      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	10908120 	.word	0x10908120
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001abe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001aec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	4ba5      	ldr	r3, [pc, #660]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001af6:	2102      	movs	r1, #2
 8001af8:	6019      	str	r1, [r3, #0]
 8001afa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f1a3 	rbit	r1, r3
 8001b04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b08:	6019      	str	r1, [r3, #0]
  return result;
 8001b0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0b0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x63a>
 8001b2c:	e06a      	b.n	8001c04 <HAL_RCC_OscConfig+0x7b0>
 8001b2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b44:	601a      	str	r2, [r3, #0]
  return result;
 8001b46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <HAL_RCC_OscConfig+0x934>)
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7fe ffb2 	bl	8000ac8 <HAL_GetTick>
 8001b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7fe ffad 	bl	8000ac8 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e36b      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
 8001b7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b82:	2202      	movs	r2, #2
 8001b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bce:	2102      	movs	r1, #2
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f1a3 	rbit	r1, r3
 8001bdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001be0:	6019      	str	r1, [r3, #0]
  return result;
 8001be2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1b2      	bne.n	8001b6a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8158 	beq.w	8001ec4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b5a      	ldr	r3, [pc, #360]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d112      	bne.n	8001c4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a56      	ldr	r2, [pc, #344]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <HAL_RCC_OscConfig+0x938>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11a      	bne.n	8001c8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c58:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <HAL_RCC_OscConfig+0x938>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_RCC_OscConfig+0x938>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c64:	f7fe ff30 	bl	8000ac8 <HAL_GetTick>
 8001c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6e:	f7fe ff2b 	bl	8000ac8 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e2e9      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <HAL_RCC_OscConfig+0x938>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0ef      	beq.n	8001c6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x852>
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a39      	ldr	r2, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e02f      	b.n	8001d06 <HAL_RCC_OscConfig+0x8b2>
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x876>
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a30      	ldr	r2, [pc, #192]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cc2:	f023 0304 	bic.w	r3, r3, #4
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	e01d      	b.n	8001d06 <HAL_RCC_OscConfig+0x8b2>
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x89a>
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0x8b2>
 8001cee:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d06b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7fe feda 	bl	8000ac8 <HAL_GetTick>
 8001d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e00b      	b.n	8001d32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7fe fed5 	bl	8000ac8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e291      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
 8001d32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d36:	2202      	movs	r2, #2
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d60:	601a      	str	r2, [r3, #0]
  return result;
 8001d62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_OscConfig+0x93c>
 8001d7c:	4b01      	ldr	r3, [pc, #4]	; (8001d84 <HAL_RCC_OscConfig+0x930>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x958>
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	10908120 	.word	0x10908120
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d94:	2202      	movs	r2, #2
 8001d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	4bbb      	ldr	r3, [pc, #748]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001db0:	2102      	movs	r1, #2
 8001db2:	6011      	str	r1, [r2, #0]
 8001db4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	fa92 f1a2 	rbit	r1, r2
 8001dbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dc2:	6011      	str	r1, [r2, #0]
  return result;
 8001dc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	fab2 f282 	clz	r2, r2
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d099      	beq.n	8001d1a <HAL_RCC_OscConfig+0x8c6>
 8001de6:	e063      	b.n	8001eb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7fe fe6e 	bl	8000ac8 <HAL_GetTick>
 8001dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	e00b      	b.n	8001e0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7fe fe69 	bl	8000ac8 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e225      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
 8001e0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e0e:	2202      	movs	r2, #2
 8001e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e38:	601a      	str	r2, [r3, #0]
  return result;
 8001e3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_OscConfig+0xa06>
 8001e54:	4b90      	ldr	r3, [pc, #576]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	e00d      	b.n	8001e76 <HAL_RCC_OscConfig+0xa22>
 8001e5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e5e:	2202      	movs	r2, #2
 8001e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	fa93 f2a3 	rbit	r2, r3
 8001e6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	6011      	str	r1, [r2, #0]
 8001e7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	fa92 f1a2 	rbit	r1, r2
 8001e88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001e8c:	6011      	str	r1, [r2, #0]
  return result;
 8001e8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	fab2 f282 	clz	r2, r2
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f002 021f 	and.w	r2, r2, #31
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1a0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb8:	4b77      	ldr	r3, [pc, #476]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	4a76      	ldr	r2, [pc, #472]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 81c2 	beq.w	8002254 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed0:	4b71      	ldr	r3, [pc, #452]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	f000 819c 	beq.w	8002216 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	f040 8114 	bne.w	8002112 <HAL_RCC_OscConfig+0xcbe>
 8001eea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001eee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fa93 f2a3 	rbit	r2, r3
 8001efe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f02:	601a      	str	r2, [r3, #0]
  return result;
 8001f04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fdd2 	bl	8000ac8 <HAL_GetTick>
 8001f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	e009      	b.n	8001f3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe fdcd 	bl	8000ac8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e18b      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
 8001f3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	fa93 f2a3 	rbit	r2, r3
 8001f52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f56:	601a      	str	r2, [r3, #0]
  return result;
 8001f58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_OscConfig+0xb24>
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb5c>
 8001f78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fb8:	6011      	str	r1, [r2, #0]
 8001fba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	fa92 f1a2 	rbit	r1, r2
 8001fc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fc8:	6011      	str	r1, [r2, #0]
  return result;
 8001fca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	fab2 f282 	clz	r2, r2
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f042 0220 	orr.w	r2, r2, #32
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	f002 021f 	and.w	r2, r2, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d19e      	bne.n	8001f2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	430b      	orrs	r3, r1
 8002002:	4925      	ldr	r1, [pc, #148]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800200c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002020:	601a      	str	r2, [r3, #0]
  return result;
 8002022:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002026:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002032:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	461a      	mov	r2, r3
 800203a:	2301      	movs	r3, #1
 800203c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe fd43 	bl	8000ac8 <HAL_GetTick>
 8002042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002046:	e009      	b.n	800205c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe fd3e 	bl	8000ac8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0fc      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
 800205c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	fa93 f2a3 	rbit	r2, r3
 8002070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002074:	601a      	str	r2, [r3, #0]
  return result;
 8002076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800207a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0xc48>
 8002090:	4b01      	ldr	r3, [pc, #4]	; (8002098 <HAL_RCC_OscConfig+0xc44>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	e01e      	b.n	80020d4 <HAL_RCC_OscConfig+0xc80>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_OscConfig+0xe0c>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020dc:	6011      	str	r1, [r2, #0]
 80020de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	fa92 f1a2 	rbit	r1, r2
 80020e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020ec:	6011      	str	r1, [r2, #0]
  return result;
 80020ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	f042 0220 	orr.w	r2, r2, #32
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	f002 021f 	and.w	r2, r2, #31
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d09b      	beq.n	8002048 <HAL_RCC_OscConfig+0xbf4>
 8002110:	e0a0      	b.n	8002254 <HAL_RCC_OscConfig+0xe00>
 8002112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002116:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800212a:	601a      	str	r2, [r3, #0]
  return result;
 800212c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002130:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800213c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	461a      	mov	r2, r3
 8002144:	2300      	movs	r3, #0
 8002146:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fcbe 	bl	8000ac8 <HAL_GetTick>
 800214c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	e009      	b.n	8002166 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7fe fcb9 	bl	8000ac8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e077      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
 8002166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800216a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fa93 f2a3 	rbit	r2, r3
 800217a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217e:	601a      	str	r2, [r3, #0]
  return result;
 8002180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002184:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d102      	bne.n	80021a0 <HAL_RCC_OscConfig+0xd4c>
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0xe0c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	e01b      	b.n	80021d8 <HAL_RCC_OscConfig+0xd84>
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f107 0318 	add.w	r3, r7, #24
 80021be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f107 0318 	add.w	r3, r7, #24
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	4b22      	ldr	r3, [pc, #136]	; (8002260 <HAL_RCC_OscConfig+0xe0c>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f107 0210 	add.w	r2, r7, #16
 80021dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	f107 0210 	add.w	r2, r7, #16
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fa92 f1a2 	rbit	r1, r2
 80021ec:	f107 020c 	add.w	r2, r7, #12
 80021f0:	6011      	str	r1, [r2, #0]
  return result;
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	fab2 f282 	clz	r2, r2
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f042 0220 	orr.w	r2, r2, #32
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f002 021f 	and.w	r2, r2, #31
 8002208:	2101      	movs	r1, #1
 800220a:	fa01 f202 	lsl.w	r2, r1, r2
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d19e      	bne.n	8002152 <HAL_RCC_OscConfig+0xcfe>
 8002214:	e01e      	b.n	8002254 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e018      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_RCC_OscConfig+0xe0c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800222c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	429a      	cmp	r2, r3
 800223c:	d108      	bne.n	8002250 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800223e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000

08002264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b09e      	sub	sp, #120	; 0x78
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e162      	b.n	8002542 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b90      	ldr	r3, [pc, #576]	; (80024c0 <HAL_RCC_ClockConfig+0x25c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d910      	bls.n	80022ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b8d      	ldr	r3, [pc, #564]	; (80024c0 <HAL_RCC_ClockConfig+0x25c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	498b      	ldr	r1, [pc, #556]	; (80024c0 <HAL_RCC_ClockConfig+0x25c>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b89      	ldr	r3, [pc, #548]	; (80024c0 <HAL_RCC_ClockConfig+0x25c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e14a      	b.n	8002542 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b82      	ldr	r3, [pc, #520]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	497f      	ldr	r1, [pc, #508]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80dc 	beq.w	8002490 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d13c      	bne.n	800235a <HAL_RCC_ClockConfig+0xf6>
 80022e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_RCC_ClockConfig+0xa6>
 8002304:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	e00f      	b.n	800232a <HAL_RCC_ClockConfig+0xc6>
 800230a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800230e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	667b      	str	r3, [r7, #100]	; 0x64
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	663b      	str	r3, [r7, #96]	; 0x60
 800231e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800232e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002332:	fa92 f2a2 	rbit	r2, r2
 8002336:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800233a:	fab2 f282 	clz	r2, r2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f042 0220 	orr.w	r2, r2, #32
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f002 021f 	and.w	r2, r2, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f202 	lsl.w	r2, r1, r2
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d17b      	bne.n	800244e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0f3      	b.n	8002542 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d13c      	bne.n	80023dc <HAL_RCC_ClockConfig+0x178>
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d102      	bne.n	800238c <HAL_RCC_ClockConfig+0x128>
 8002386:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	e00f      	b.n	80023ac <HAL_RCC_ClockConfig+0x148>
 800238c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002390:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	647b      	str	r3, [r7, #68]	; 0x44
 800239a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800239e:	643b      	str	r3, [r7, #64]	; 0x40
 80023a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80023b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023b4:	fa92 f2a2 	rbit	r2, r2
 80023b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d13a      	bne.n	800244e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b2      	b.n	8002542 <HAL_RCC_ClockConfig+0x2de>
 80023dc:	2302      	movs	r3, #2
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_ClockConfig+0x1a0>
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	e00d      	b.n	8002420 <HAL_RCC_ClockConfig+0x1bc>
 8002404:	2302      	movs	r3, #2
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	2302      	movs	r3, #2
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2202      	movs	r2, #2
 8002422:	61ba      	str	r2, [r7, #24]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	fa92 f2a2 	rbit	r2, r2
 800242a:	617a      	str	r2, [r7, #20]
  return result;
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	fab2 f282 	clz	r2, r2
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f042 0220 	orr.w	r2, r2, #32
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f002 021f 	and.w	r2, r2, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f202 	lsl.w	r2, r1, r2
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e079      	b.n	8002542 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	491a      	ldr	r1, [pc, #104]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe fb32 	bl	8000ac8 <HAL_GetTick>
 8002464:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fb2e 	bl	8000ac8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e061      	b.n	8002542 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_RCC_ClockConfig+0x260>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x25c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d214      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_RCC_ClockConfig+0x25c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0207 	bic.w	r2, r3, #7
 80024a6:	4906      	ldr	r1, [pc, #24]	; (80024c0 <HAL_RCC_ClockConfig+0x25c>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <HAL_RCC_ClockConfig+0x25c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e040      	b.n	8002542 <HAL_RCC_ClockConfig+0x2de>
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCC_ClockConfig+0x2e8>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	491a      	ldr	r1, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x2e8>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x2e8>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4912      	ldr	r1, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x2e8>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002506:	f000 f829 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800250a:	4601      	mov	r1, r0
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x2e8>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002514:	22f0      	movs	r2, #240	; 0xf0
 8002516:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	60fa      	str	r2, [r7, #12]
  return result;
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	fab2 f282 	clz	r2, r2
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	40d3      	lsrs	r3, r2
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x2ec>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	fa21 f303 	lsr.w	r3, r1, r3
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_RCC_ClockConfig+0x2f0>)
 8002534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_RCC_ClockConfig+0x2f4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fa80 	bl	8000a40 <HAL_InitTick>
  
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3778      	adds	r7, #120	; 0x78
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	080045e0 	.word	0x080045e0
 8002554:	20000000 	.word	0x20000000
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002576:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x30>
 8002586:	2b08      	cmp	r3, #8
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x36>
 800258a:	e03c      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc4>)
 800258e:	623b      	str	r3, [r7, #32]
      break;
 8002590:	e03c      	b.n	800260c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002598:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800259c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	fa92 f2a2 	rbit	r2, r2
 80025a4:	607a      	str	r2, [r7, #4]
  return result;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	40d3      	lsrs	r3, r2
 80025b0:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	220f      	movs	r2, #15
 80025c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	fa92 f2a2 	rbit	r2, r2
 80025c8:	60fa      	str	r2, [r7, #12]
  return result;
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	40d3      	lsrs	r3, r2
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
 80025f4:	e004      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	4a0c      	ldr	r2, [pc, #48]	; (800262c <HAL_RCC_GetSysClockFreq+0xd0>)
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	623b      	str	r3, [r7, #32]
      break;
 8002604:	e002      	b.n	800260c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002608:	623b      	str	r3, [r7, #32]
      break;
 800260a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260c:	6a3b      	ldr	r3, [r7, #32]
}
 800260e:	4618      	mov	r0, r3
 8002610:	372c      	adds	r7, #44	; 0x2c
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	080045f0 	.word	0x080045f0
 8002628:	08004600 	.word	0x08004600
 800262c:	003d0900 	.word	0x003d0900

08002630 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b092      	sub	sp, #72	; 0x48
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80d7 	beq.w	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002654:	4b4e      	ldr	r3, [pc, #312]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10e      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	4a4a      	ldr	r2, [pc, #296]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266a:	61d3      	str	r3, [r2, #28]
 800266c:	4b48      	ldr	r3, [pc, #288]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b45      	ldr	r3, [pc, #276]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b42      	ldr	r3, [pc, #264]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a41      	ldr	r2, [pc, #260]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7fe fa17 	bl	8000ac8 <HAL_GetTick>
 800269a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7fe fa13 	bl	8000ac8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e12d      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b38      	ldr	r3, [pc, #224]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8084 	beq.w	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d07c      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	461a      	mov	r2, r3
 8002706:	2301      	movs	r3, #1
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	461a      	mov	r2, r3
 800272a:	2300      	movs	r3, #0
 800272c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800272e:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d04b      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe f9c3 	bl	8000ac8 <HAL_GetTick>
 8002742:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe f9bf 	bl	8000ac8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0d7      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800275c:	2302      	movs	r3, #2
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	61fb      	str	r3, [r7, #28]
  return result;
 8002774:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d108      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800278a:	4b01      	ldr	r3, [pc, #4]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	e00d      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002790:	40021000 	.word	0x40021000
 8002794:	40007000 	.word	0x40007000
 8002798:	10908100 	.word	0x10908100
 800279c:	2302      	movs	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	4b5a      	ldr	r3, [pc, #360]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2202      	movs	r2, #2
 80027ae:	613a      	str	r2, [r7, #16]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	fa92 f2a2 	rbit	r2, r2
 80027b6:	60fa      	str	r2, [r7, #12]
  return result;
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0b7      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027d6:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	494c      	ldr	r1, [pc, #304]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4b48      	ldr	r3, [pc, #288]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4a47      	ldr	r2, [pc, #284]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002808:	4b42      	ldr	r3, [pc, #264]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f023 0203 	bic.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	493f      	ldr	r1, [pc, #252]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4938      	ldr	r1, [pc, #224]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002844:	4b33      	ldr	r3, [pc, #204]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	4930      	ldr	r1, [pc, #192]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4929      	ldr	r1, [pc, #164]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	4921      	ldr	r1, [pc, #132]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f023 0220 	bic.w	r2, r3, #32
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	491a      	ldr	r1, [pc, #104]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	4912      	ldr	r1, [pc, #72]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	490b      	ldr	r1, [pc, #44]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	4903      	ldr	r1, [pc, #12]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3748      	adds	r7, #72	; 0x48
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000

08002918 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e073      	b.n	8002a12 <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7fd feaf 	bl	80006cc <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800297c:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80029a4:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_SDADC_Init+0x104>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d00f      	beq.n	80029e8 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_SDADC_Init+0x104>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <HAL_SDADC_Init+0x104>)
 80029ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d2:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_SDADC_Init+0x104>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	490f      	ldr	r1, [pc, #60]	; (8002a1c <HAL_SDADC_Init+0x104>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 80029e2:	2002      	movs	r0, #2
 80029e4:	f7fe f87c 	bl	8000ae0 <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 80029f8:	bf00      	nop
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f8      	bne.n	80029fa <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40016000 	.word	0x40016000

08002a20 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d002      	beq.n	8002a40 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
 8002a3e:	e025      	b.n	8002a8c <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fa16 	bl	8002e72 <SDADC_EnterInitMode>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	22ff      	movs	r2, #255	; 0xff
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	75fb      	strb	r3, [r7, #23]
 8002a58:	e018      	b.n	8002a8c <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8002a64:	4413      	add	r3, r2
 8002a66:	3320      	adds	r3, #32
 8002a68:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8002a72:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8002a78:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8002a80:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8002a82:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8002a84:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa16 	bl	8002eb8 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
 8002ab6:	e037      	b.n	8002b28 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f9da 	bl	8002e72 <SDADC_EnterInitMode>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	75fb      	strb	r3, [r7, #23]
 8002ad0:	e02a      	b.n	8002b28 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01f      	beq.n	8002b1a <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
 8002b18:	e003      	b.n	8002b22 <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f9c8 	bl	8002eb8 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	00080100 	.word	0x00080100

08002b38 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d027      	beq.n	8002ba2 <HAL_SDADC_InjectedConfigChannel+0x6a>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2bff      	cmp	r3, #255	; 0xff
 8002b5a:	d022      	beq.n	8002ba2 <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	b292      	uxth	r2, r2
 8002b64:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d108      	bne.n	8002b7e <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	e007      	b.n	8002b8e <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0220 	bic.w	r2, r2, #32
 8002b8c:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8002b94:	68b8      	ldr	r0, [r7, #8]
 8002b96:	f000 f9a1 	bl	8002edc <SDADC_GetInjChannelsNbr>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]
 8002ba0:	e001      	b.n	8002ba6 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d105      	bne.n	8002bd4 <HAL_SDADC_SelectInjectedTrigger+0x24>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e014      	b.n	8002bfe <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d009      	beq.n	8002bf2 <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d004      	beq.n	8002bf2 <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d103      	bne.n	8002bfa <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bf8:	e001      	b.n	8002bfe <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;    
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40016000 	.word	0x40016000

08002c10 <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d120      	bne.n	8002c6a <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f922 	bl	8002e72 <SDADC_EnterInitMode>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e015      	b.n	8002c6e <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c50:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f928 	bl	8002eb8 <SDADC_ExitInitMode>
 8002c68:	e001      	b.n	8002c6e <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_SDADC_InjectedStart_DMA>:
  * @param  Length The length of data to be transferred from SDADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStart_DMA(SDADC_HandleTypeDef *hsdadc, uint32_t *pData,
                                              uint32_t Length)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(pData != ((void*) 0));
  assert_param(Length != 0UL);

  /* Check that DMA is not enabled for regular conversion */
  if((hsdadc->Instance->CR1 & SDADC_CR1_RDMAEN) == SDADC_CR1_RDMAEN)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c92:	d102      	bne.n	8002c9a <HAL_SDADC_InjectedStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	75fb      	strb	r3, [r7, #23]
 8002c98:	e063      	b.n	8002d62 <HAL_SDADC_InjectedStart_DMA+0xea>
  }
  /* Check parameters compatibility */
  else if((hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d110      	bne.n	8002cc4 <HAL_SDADC_InjectedStart_DMA+0x4c>
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	69db      	ldr	r3, [r3, #28]
  else if((hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_SDADC_InjectedStart_DMA+0x4c>
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	699b      	ldr	r3, [r3, #24]
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SDADC_InjectedStart_DMA+0x4c>
          (Length > hsdadc->InjectedChannelsNbr))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
          (hsdadc->hdma->Init.Mode == DMA_NORMAL) && \
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d902      	bls.n	8002cc4 <HAL_SDADC_InjectedStart_DMA+0x4c>
  {
    status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
 8002cc2:	e04e      	b.n	8002d62 <HAL_SDADC_InjectedStart_DMA+0xea>
  }
  else if((hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_SDADC_InjectedStart_DMA+0x6c>
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	69db      	ldr	r3, [r3, #28]
  else if((hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_SDADC_InjectedStart_DMA+0x6c>
          (hsdadc->hdma->Init.Mode == DMA_CIRCULAR))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	699b      	ldr	r3, [r3, #24]
          (hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d102      	bne.n	8002ce4 <HAL_SDADC_InjectedStart_DMA+0x6c>
  {
    status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
 8002ce2:	e03e      	b.n	8002d62 <HAL_SDADC_InjectedStart_DMA+0xea>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d004      	beq.n	8002cf8 <HAL_SDADC_InjectedStart_DMA+0x80>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d132      	bne.n	8002d5e <HAL_SDADC_InjectedStart_DMA+0xe6>
  {
    /* Set callbacks on DMA handler */
    hsdadc->hdma->XferCpltCallback = SDADC_DMAInjectedConvCplt;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <HAL_SDADC_InjectedStart_DMA+0xf4>)
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
    hsdadc->hdma->XferErrorCallback = SDADC_DMAError;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_SDADC_InjectedStart_DMA+0xf8>)
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
    if(hsdadc->hdma->Init.Mode == DMA_CIRCULAR)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d103      	bne.n	8002d1a <HAL_SDADC_InjectedStart_DMA+0xa2>
    {
      hsdadc->hdma->XferHalfCpltCallback = SDADC_DMAInjectedHalfConvCplt;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_SDADC_InjectedStart_DMA+0xfc>)
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Set JDMAEN bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= SDADC_CR1_JDMAEN;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d28:	601a      	str	r2, [r3, #0]

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->JDATAR, \
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6958      	ldr	r0, [r3, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3360      	adds	r3, #96	; 0x60
 8002d34:	4619      	mov	r1, r3
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f7fe f84b 	bl	8000dd4 <HAL_DMA_Start_IT>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <HAL_SDADC_InjectedStart_DMA+0xda>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	22ff      	movs	r2, #255	; 0xff
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->JDATAR, \
 8002d50:	e007      	b.n	8002d62 <HAL_SDADC_InjectedStart_DMA+0xea>
    }
    else
    {
      /* Start injected conversion */
      status = SDADC_InjConvStart(hsdadc);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f8e6 	bl	8002f24 <SDADC_InjConvStart>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hsdadc->hdma, (uint32_t)&hsdadc->Instance->JDATAR, \
 8002d5c:	e001      	b.n	8002d62 <HAL_SDADC_InjectedStart_DMA+0xea>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	08002e35 	.word	0x08002e35
 8002d70:	08002e51 	.word	0x08002e51
 8002d74:	08002e19 	.word	0x08002e19

08002d78 <HAL_SDADC_InjectedStop_DMA>:
  * @note   This function should be called only if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedStop_DMA(SDADC_HandleTypeDef *hsdadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d007      	beq.n	8002d9a <HAL_SDADC_InjectedStop_DMA+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_INJ) && \
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d002      	beq.n	8002d9a <HAL_SDADC_InjectedStop_DMA+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	e01b      	b.n	8002dd2 <HAL_SDADC_InjectedStop_DMA+0x5a>
  }
  else
  {
    /* Clear JDMAEN bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_JDMAEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002da8:	601a      	str	r2, [r3, #0]

    /* Stop current DMA transfer */
    if(HAL_DMA_Abort(hsdadc->hdma) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe f86f 	bl	8000e92 <HAL_DMA_Abort>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <HAL_SDADC_InjectedStop_DMA+0x50>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	22ff      	movs	r2, #255	; 0xff
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e004      	b.n	8002dd2 <HAL_SDADC_InjectedStop_DMA+0x5a>
    }
    else
    {
      /* Stop injected conversion */
      status = SDADC_InjConvStop(hsdadc);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8fb 	bl	8002fc4 <SDADC_InjConvStop>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return function status */
  return status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_SDADC_InjectedConvHalfCpltCallback>:
  * @brief  Half injected conversion complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvHalfCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvHalfCpltCallback could be implemented in the user file.
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_SDADC_InjectedConvCpltCallback>:
            using HAL_SDADC_InjectedGetValue or HAL_SDADC_InjectedMultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvCpltCallback could be implemented in the user file.
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SDADC_DMAInjectedHalfConvCplt>:
  * @brief  DMA half transfer complete callback for injected conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMAInjectedHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Call injected half conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->InjectedConvHalfCpltCallback(hsdadc);
#else
  HAL_SDADC_InjectedConvHalfCpltCallback(hsdadc);
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff ffd8 	bl	8002ddc <HAL_SDADC_InjectedConvHalfCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <SDADC_DMAInjectedConvCplt>:
  * @brief  DMA transfer complete callback for injected conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMAInjectedConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->InjectedConvCpltCallback(hsdadc);
#else
  HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff ffd4 	bl	8002df0 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <SDADC_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void SDADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Get SDADC handle */
  SDADC_HandleTypeDef* hsdadc = (SDADC_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hsdadc->ErrorCode = SDADC_ERROR_DMA;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2203      	movs	r2, #3
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
  hsdadc->ErrorCallback(hsdadc);
#else
  HAL_SDADC_ErrorCallback(hsdadc);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff ffcd 	bl	8002e04 <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e88:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8002e8a:	f7fd fe1d 	bl	8000ac8 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002e90:	e008      	b.n	8002ea4 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8002e92:	f7fd fe19 	bl	8000ac8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2bc8      	cmp	r3, #200	; 0xc8
 8002e9e:	d901      	bls.n	8002ea4 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e005      	b.n	8002eb0 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	daf1      	bge.n	8002e92 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;
  
  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	e00d      	b.n	8002f10 <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d9ee      	bls.n	8002ef4 <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 8002f16:	697b      	ldr	r3, [r7, #20]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <SDADC_InjConvStart>:
  * @brief  This function allows to really start injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]

  /* Initialize number of injected conversions remaining */
  hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check injected trigger */
  if(hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d108      	bne.n	8002f52 <SDADC_InjConvStart+0x2e>
  {
    /* Set JSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JSWSTART;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	e025      	b.n	8002f9e <SDADC_InjConvStart+0x7a>
  }
  else /* external or synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff8d 	bl	8002e72 <SDADC_EnterInitMode>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <SDADC_InjConvStart+0x48>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	73fb      	strb	r3, [r7, #15]
 8002f6a:	e018      	b.n	8002f9e <SDADC_InjConvStart+0x7a>
    }
    else
    {
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d108      	bne.n	8002f86 <SDADC_InjConvStart+0x62>
      {
        /* Set JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 |= SDADC_CR1_JSYNC;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e008      	b.n	8002f98 <SDADC_InjConvStart+0x74>
      }
      else /* external trigger */
      {
        /* Set JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 |= hsdadc->ExtTriggerEdge;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff8d 	bl	8002eb8 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <SDADC_InjConvStart+0x96>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_INJ : HAL_SDADC_STATE_REG_INJ;
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <SDADC_InjConvStart+0x8e>
 8002fae:	2204      	movs	r2, #4
 8002fb0:	e000      	b.n	8002fb4 <SDADC_InjConvStart+0x90>
 8002fb2:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <SDADC_InjConvStop>:
  * @brief  This function allows to really stop injected conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_InjConvStop(SDADC_HandleTypeDef* hsdadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;
  
  /* Check continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10c      	bne.n	8002fee <SDADC_InjConvStop+0x2a>
  {
    /* Clear JEOCF by reading SDADC_JDATAR register */
    dummy_read_for_register_reset =  hsdadc->Instance->JDATAR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fda:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 8002fdc:	68bb      	ldr	r3, [r7, #8]

    /* Clear JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0220 	bic.w	r2, r2, #32
 8002fec:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of injected conversion */
  tickstart = HAL_GetTick();  
 8002fee:	f7fd fd6b 	bl	8000ac8 <HAL_GetTick>
 8002ff2:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 8002ff4:	e00c      	b.n	8003010 <SDADC_InjConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8002ff6:	f7fd fd67 	bl	8000ac8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2bc8      	cmp	r3, #200	; 0xc8
 8003002:	d905      	bls.n	8003010 <SDADC_InjConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e053      	b.n	80030b8 <SDADC_InjConvStop+0xf4>
  while((hsdadc->Instance->ISR & SDADC_ISR_JCIP) != 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1eb      	bne.n	8002ff6 <SDADC_InjConvStop+0x32>
    }
  }
  /* Check if trigger is not software */
  if(hsdadc->InjectedTrigger != SDADC_SOFTWARE_TRIGGER)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d023      	beq.n	800306e <SDADC_InjConvStop+0xaa>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff23 	bl	8002e72 <SDADC_EnterInitMode>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <SDADC_InjConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	22ff      	movs	r2, #255	; 0xff
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e03c      	b.n	80030b8 <SDADC_InjConvStop+0xf4>
    }
    else
    {
      /* Check if trigger is synchronuous */
      if(hsdadc->InjectedTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d108      	bne.n	8003058 <SDADC_InjConvStop+0x94>
      {
        /* Clear JSYNC bit in SDADC_CR1 register */
        hsdadc->Instance->CR1 &= ~(SDADC_CR1_JSYNC);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e007      	b.n	8003068 <SDADC_InjConvStop+0xa4>
      }
      else /* external trigger */
      {
        /* Clear JEXTEN[1:0] bits in SDADC_CR2 register */
        hsdadc->Instance->CR2 &= ~(SDADC_CR2_JEXTEN);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003066:	605a      	str	r2, [r3, #4]
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff25 	bl	8002eb8 <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_ON)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <SDADC_InjConvStop+0xc2>
  {
    /* Restore JCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0220 	orr.w	r2, r2, #32
 8003084:	605a      	str	r2, [r3, #4]
  }
  /* Clear JEOCF by reading SDADC_JDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->JDATAR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 800308e:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRJOVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0204 	orr.w	r2, r2, #4
 800309e:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d101      	bne.n	80030ae <SDADC_InjConvStop+0xea>
 80030aa:	2201      	movs	r2, #1
 80030ac:	e000      	b.n	80030b0 <SDADC_InjConvStop+0xec>
 80030ae:	2203      	movs	r2, #3
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d2:	2b84      	cmp	r3, #132	; 0x84
 80030d4:	d005      	beq.n	80030e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	3303      	adds	r3, #3
 80030e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030f4:	f000 fad2 	bl	800369c <vTaskStartScheduler>
  
  return osOK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	bd80      	pop	{r7, pc}

080030fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003100:	b089      	sub	sp, #36	; 0x24
 8003102:	af04      	add	r7, sp, #16
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <osThreadCreate+0x54>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01c      	beq.n	8003152 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685c      	ldr	r4, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681d      	ldr	r5, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691e      	ldr	r6, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ffc8 	bl	80030c0 <makeFreeRtosPriority>
 8003130:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800313a:	9202      	str	r2, [sp, #8]
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	9100      	str	r1, [sp, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4632      	mov	r2, r6
 8003144:	4629      	mov	r1, r5
 8003146:	4620      	mov	r0, r4
 8003148:	f000 f8ed 	bl	8003326 <xTaskCreateStatic>
 800314c:	4603      	mov	r3, r0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e01c      	b.n	800318c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685c      	ldr	r4, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800315e:	b29e      	uxth	r6, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ffaa 	bl	80030c0 <makeFreeRtosPriority>
 800316c:	4602      	mov	r2, r0
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	9200      	str	r2, [sp, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	4632      	mov	r2, r6
 800317a:	4629      	mov	r1, r5
 800317c:	4620      	mov	r0, r4
 800317e:	f000 f92b 	bl	80033d8 <xTaskCreate>
 8003182:	4603      	mov	r3, r0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800318c:	68fb      	ldr	r3, [r7, #12]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003196 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <osDelay+0x16>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	e000      	b.n	80031ae <osDelay+0x18>
 80031ac:	2301      	movs	r3, #1
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fa40 	bl	8003634 <vTaskDelay>
  
  return osOK;
 80031b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f103 0208 	add.w	r2, r3, #8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f04f 32ff 	mov.w	r2, #4294967295
 80031d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f103 0208 	add.w	r2, r3, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f103 0208 	add.w	r2, r3, #8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	601a      	str	r2, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d103      	bne.n	8003280 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e00c      	b.n	800329a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3308      	adds	r3, #8
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e002      	b.n	800328e <vListInsert+0x2e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d2f6      	bcs.n	8003288 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6892      	ldr	r2, [r2, #8]
 80032e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6852      	ldr	r2, [r2, #4]
 80032f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d103      	bne.n	8003306 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003326:	b580      	push	{r7, lr}
 8003328:	b08e      	sub	sp, #56	; 0x38
 800332a:	af04      	add	r7, sp, #16
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	e7fe      	b.n	800334c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <xTaskCreateStatic+0x42>
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e7fe      	b.n	8003366 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003368:	2354      	movs	r3, #84	; 0x54
 800336a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b54      	cmp	r3, #84	; 0x54
 8003370:	d009      	beq.n	8003386 <xTaskCreateStatic+0x60>
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	e7fe      	b.n	8003384 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01e      	beq.n	80033ca <xTaskCreateStatic+0xa4>
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01b      	beq.n	80033ca <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800339a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033a4:	2300      	movs	r3, #0
 80033a6:	9303      	str	r3, [sp, #12]
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	9302      	str	r3, [sp, #8]
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f850 	bl	8003462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033c4:	f000 f8cc 	bl	8003560 <prvAddNewTaskToReadyList>
 80033c8:	e001      	b.n	80033ce <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033ce:	697b      	ldr	r3, [r7, #20]
	}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08c      	sub	sp, #48	; 0x30
 80033dc:	af04      	add	r7, sp, #16
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fed1 	bl	8004194 <pvPortMalloc>
 80033f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80033fa:	2054      	movs	r0, #84	; 0x54
 80033fc:	f000 feca 	bl	8004194 <pvPortMalloc>
 8003400:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
 800340e:	e005      	b.n	800341c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003410:	6978      	ldr	r0, [r7, #20]
 8003412:	f000 ff81 	bl	8004318 <vPortFree>
 8003416:	e001      	b.n	800341c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d017      	beq.n	8003452 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	2300      	movs	r3, #0
 800342e:	9303      	str	r3, [sp, #12]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	9302      	str	r3, [sp, #8]
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f80e 	bl	8003462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003446:	69f8      	ldr	r0, [r7, #28]
 8003448:	f000 f88a 	bl	8003560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800344c:	2301      	movs	r3, #1
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e002      	b.n	8003458 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003458:	69bb      	ldr	r3, [r7, #24]
	}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b088      	sub	sp, #32
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800347a:	3b01      	subs	r3, #1
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f023 0307 	bic.w	r3, r3, #7
 8003488:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <prvInitialiseNewTask+0x46>
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e7fe      	b.n	80034a6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	e012      	b.n	80034d4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	4413      	add	r3, r2
 80034b4:	7819      	ldrb	r1, [r3, #0]
 80034b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	3334      	adds	r3, #52	; 0x34
 80034be:	460a      	mov	r2, r1
 80034c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3301      	adds	r3, #1
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	d9e9      	bls.n	80034ae <prvInitialiseNewTask+0x4c>
 80034da:	e000      	b.n	80034de <prvInitialiseNewTask+0x7c>
		{
			break;
 80034dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d901      	bls.n	80034f0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034ec:	2306      	movs	r3, #6
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	2200      	movs	r2, #0
 8003500:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	3304      	adds	r3, #4
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fe79 	bl	80031fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	3318      	adds	r3, #24
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fe74 	bl	80031fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	f1c3 0207 	rsb	r2, r3, #7
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	2200      	movs	r2, #0
 8003530:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	68f9      	ldr	r1, [r7, #12]
 800353e:	69b8      	ldr	r0, [r7, #24]
 8003540:	f000 fc26 	bl	8003d90 <pxPortInitialiseStack>
 8003544:	4602      	mov	r2, r0
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003556:	bf00      	nop
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003568:	f000 fd38 	bl	8003fdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <prvAddNewTaskToReadyList+0xb8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	4a29      	ldr	r2, [pc, #164]	; (8003618 <prvAddNewTaskToReadyList+0xb8>)
 8003574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <prvAddNewTaskToReadyList+0xbc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800357e:	4a27      	ldr	r2, [pc, #156]	; (800361c <prvAddNewTaskToReadyList+0xbc>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <prvAddNewTaskToReadyList+0xb8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d110      	bne.n	80035ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800358c:	f000 fabc 	bl	8003b08 <prvInitialiseTaskLists>
 8003590:	e00d      	b.n	80035ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003592:	4b23      	ldr	r3, [pc, #140]	; (8003620 <prvAddNewTaskToReadyList+0xc0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <prvAddNewTaskToReadyList+0xbc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d802      	bhi.n	80035ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <prvAddNewTaskToReadyList+0xbc>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <prvAddNewTaskToReadyList+0xc4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <prvAddNewTaskToReadyList+0xc4>)
 80035b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	2201      	movs	r2, #1
 80035be:	409a      	lsls	r2, r3
 80035c0:	4b19      	ldr	r3, [pc, #100]	; (8003628 <prvAddNewTaskToReadyList+0xc8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	4a18      	ldr	r2, [pc, #96]	; (8003628 <prvAddNewTaskToReadyList+0xc8>)
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4a15      	ldr	r2, [pc, #84]	; (800362c <prvAddNewTaskToReadyList+0xcc>)
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f7ff fe19 	bl	8003218 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035e6:	f000 fd27 	bl	8004038 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <prvAddNewTaskToReadyList+0xc0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <prvAddNewTaskToReadyList+0xbc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d207      	bcs.n	8003610 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <prvAddNewTaskToReadyList+0xd0>)
 8003602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200003ac 	.word	0x200003ac
 800361c:	200002ac 	.word	0x200002ac
 8003620:	200003b8 	.word	0x200003b8
 8003624:	200003c8 	.word	0x200003c8
 8003628:	200003b4 	.word	0x200003b4
 800362c:	200002b0 	.word	0x200002b0
 8003630:	e000ed04 	.word	0xe000ed04

08003634 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <vTaskDelay+0x60>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <vTaskDelay+0x2e>
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	e7fe      	b.n	8003660 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003662:	f000 f879 	bl	8003758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003666:	2100      	movs	r1, #0
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fb2b 	bl	8003cc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800366e:	f000 f881 	bl	8003774 <xTaskResumeAll>
 8003672:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <vTaskDelay+0x64>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200003d4 	.word	0x200003d4
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036aa:	463a      	mov	r2, r7
 80036ac:	1d39      	adds	r1, r7, #4
 80036ae:	f107 0308 	add.w	r3, r7, #8
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc fdb2 	bl	800021c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	9202      	str	r2, [sp, #8]
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	460a      	mov	r2, r1
 80036ca:	491d      	ldr	r1, [pc, #116]	; (8003740 <vTaskStartScheduler+0xa4>)
 80036cc:	481d      	ldr	r0, [pc, #116]	; (8003744 <vTaskStartScheduler+0xa8>)
 80036ce:	f7ff fe2a 	bl	8003326 <xTaskCreateStatic>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <vTaskStartScheduler+0xac>)
 80036d6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <vTaskStartScheduler+0xac>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036e0:	2301      	movs	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e001      	b.n	80036ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d115      	bne.n	800371c <vTaskStartScheduler+0x80>
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <vTaskStartScheduler+0xb0>)
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <vTaskStartScheduler+0xb4>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003710:	4b10      	ldr	r3, [pc, #64]	; (8003754 <vTaskStartScheduler+0xb8>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003716:	f000 fbc3 	bl	8003ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800371a:	e00d      	b.n	8003738 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d109      	bne.n	8003738 <vTaskStartScheduler+0x9c>
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e7fe      	b.n	8003736 <vTaskStartScheduler+0x9a>
}
 8003738:	bf00      	nop
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	080045d8 	.word	0x080045d8
 8003744:	08003ad9 	.word	0x08003ad9
 8003748:	200003d0 	.word	0x200003d0
 800374c:	200003cc 	.word	0x200003cc
 8003750:	200003b8 	.word	0x200003b8
 8003754:	200003b0 	.word	0x200003b0

08003758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <vTaskSuspendAll+0x18>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	4a03      	ldr	r2, [pc, #12]	; (8003770 <vTaskSuspendAll+0x18>)
 8003764:	6013      	str	r3, [r2, #0]
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	200003d4 	.word	0x200003d4

08003774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <xTaskResumeAll+0x114>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <xTaskResumeAll+0x2a>
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	e7fe      	b.n	800379c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800379e:	f000 fc1d 	bl	8003fdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <xTaskResumeAll+0x114>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	4a37      	ldr	r2, [pc, #220]	; (8003888 <xTaskResumeAll+0x114>)
 80037aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ac:	4b36      	ldr	r3, [pc, #216]	; (8003888 <xTaskResumeAll+0x114>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d161      	bne.n	8003878 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037b4:	4b35      	ldr	r3, [pc, #212]	; (800388c <xTaskResumeAll+0x118>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d05d      	beq.n	8003878 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037bc:	e02e      	b.n	800381c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <xTaskResumeAll+0x11c>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3318      	adds	r3, #24
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fd81 	bl	80032d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fd7c 	bl	80032d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	2201      	movs	r2, #1
 80037e0:	409a      	lsls	r2, r3
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <xTaskResumeAll+0x120>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	4a2a      	ldr	r2, [pc, #168]	; (8003894 <xTaskResumeAll+0x120>)
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4a27      	ldr	r2, [pc, #156]	; (8003898 <xTaskResumeAll+0x124>)
 80037fa:	441a      	add	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3304      	adds	r3, #4
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f7ff fd08 	bl	8003218 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	4b23      	ldr	r3, [pc, #140]	; (800389c <xTaskResumeAll+0x128>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <xTaskResumeAll+0x12c>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800381c:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <xTaskResumeAll+0x11c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1cc      	bne.n	80037be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800382a:	f000 fa07 	bl	8003c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <xTaskResumeAll+0x130>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d010      	beq.n	800385c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800383a:	f000 f837 	bl	80038ac <xTaskIncrementTick>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003844:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <xTaskResumeAll+0x12c>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3b01      	subs	r3, #1
 800384e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f1      	bne.n	800383a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <xTaskResumeAll+0x130>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800385c:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <xTaskResumeAll+0x12c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003864:	2301      	movs	r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <xTaskResumeAll+0x134>)
 800386a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003878:	f000 fbde 	bl	8004038 <vPortExitCritical>

	return xAlreadyYielded;
 800387c:	68bb      	ldr	r3, [r7, #8]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200003d4 	.word	0x200003d4
 800388c:	200003ac 	.word	0x200003ac
 8003890:	2000036c 	.word	0x2000036c
 8003894:	200003b4 	.word	0x200003b4
 8003898:	200002b0 	.word	0x200002b0
 800389c:	200002ac 	.word	0x200002ac
 80038a0:	200003c0 	.word	0x200003c0
 80038a4:	200003bc 	.word	0x200003bc
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b6:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <xTaskIncrementTick+0x14c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 808c 	bne.w	80039d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038c0:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <xTaskIncrementTick+0x150>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038c8:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <xTaskIncrementTick+0x150>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d11f      	bne.n	8003914 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80038d4:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <xTaskIncrementTick+0x154>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <xTaskIncrementTick+0x46>
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	e7fe      	b.n	80038f0 <xTaskIncrementTick+0x44>
 80038f2:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <xTaskIncrementTick+0x154>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	4b42      	ldr	r3, [pc, #264]	; (8003a04 <xTaskIncrementTick+0x158>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a40      	ldr	r2, [pc, #256]	; (8003a00 <xTaskIncrementTick+0x154>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4a40      	ldr	r2, [pc, #256]	; (8003a04 <xTaskIncrementTick+0x158>)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <xTaskIncrementTick+0x15c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3301      	adds	r3, #1
 800390c:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <xTaskIncrementTick+0x15c>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	f000 f994 	bl	8003c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003914:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <xTaskIncrementTick+0x160>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	429a      	cmp	r2, r3
 800391c:	d34d      	bcc.n	80039ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391e:	4b38      	ldr	r3, [pc, #224]	; (8003a00 <xTaskIncrementTick+0x154>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <xTaskIncrementTick+0x80>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <xTaskIncrementTick+0x82>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003932:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <xTaskIncrementTick+0x160>)
 8003934:	f04f 32ff 	mov.w	r2, #4294967295
 8003938:	601a      	str	r2, [r3, #0]
					break;
 800393a:	e03e      	b.n	80039ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800393c:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <xTaskIncrementTick+0x154>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d203      	bcs.n	800395c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003954:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <xTaskIncrementTick+0x160>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6013      	str	r3, [r2, #0]
						break;
 800395a:	e02e      	b.n	80039ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	3304      	adds	r3, #4
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fcb6 	bl	80032d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3318      	adds	r3, #24
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fcad 	bl	80032d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	2201      	movs	r2, #1
 800397e:	409a      	lsls	r2, r3
 8003980:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <xTaskIncrementTick+0x164>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4313      	orrs	r3, r2
 8003986:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <xTaskIncrementTick+0x164>)
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <xTaskIncrementTick+0x168>)
 8003998:	441a      	add	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3304      	adds	r3, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f7ff fc39 	bl	8003218 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <xTaskIncrementTick+0x16c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d3b4      	bcc.n	800391e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b8:	e7b1      	b.n	800391e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <xTaskIncrementTick+0x16c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	4914      	ldr	r1, [pc, #80]	; (8003a14 <xTaskIncrementTick+0x168>)
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d907      	bls.n	80039e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80039d2:	2301      	movs	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	e004      	b.n	80039e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <xTaskIncrementTick+0x170>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <xTaskIncrementTick+0x170>)
 80039e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <xTaskIncrementTick+0x174>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80039ea:	2301      	movs	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200003d4 	.word	0x200003d4
 80039fc:	200003b0 	.word	0x200003b0
 8003a00:	20000364 	.word	0x20000364
 8003a04:	20000368 	.word	0x20000368
 8003a08:	200003c4 	.word	0x200003c4
 8003a0c:	200003cc 	.word	0x200003cc
 8003a10:	200003b4 	.word	0x200003b4
 8003a14:	200002b0 	.word	0x200002b0
 8003a18:	200002ac 	.word	0x200002ac
 8003a1c:	200003bc 	.word	0x200003bc
 8003a20:	200003c0 	.word	0x200003c0

08003a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <vTaskSwitchContext+0xa0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a32:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <vTaskSwitchContext+0xa4>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a38:	e03e      	b.n	8003ab8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003a3a:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <vTaskSwitchContext+0xa4>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a40:	4b22      	ldr	r3, [pc, #136]	; (8003acc <vTaskSwitchContext+0xa8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	fab3 f383 	clz	r3, r3
 8003a4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
 8003a50:	f1c3 031f 	rsb	r3, r3, #31
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	491e      	ldr	r1, [pc, #120]	; (8003ad0 <vTaskSwitchContext+0xac>)
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <vTaskSwitchContext+0x5a>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	e7fe      	b.n	8003a7c <vTaskSwitchContext+0x58>
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <vTaskSwitchContext+0xac>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d104      	bne.n	8003aae <vTaskSwitchContext+0x8a>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <vTaskSwitchContext+0xb0>)
 8003ab6:	6013      	str	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	200003d4 	.word	0x200003d4
 8003ac8:	200003c0 	.word	0x200003c0
 8003acc:	200003b4 	.word	0x200003b4
 8003ad0:	200002b0 	.word	0x200002b0
 8003ad4:	200002ac 	.word	0x200002ac

08003ad8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ae0:	f000 f852 	bl	8003b88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <prvIdleTask+0x28>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d9f9      	bls.n	8003ae0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <prvIdleTask+0x2c>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003afc:	e7f0      	b.n	8003ae0 <prvIdleTask+0x8>
 8003afe:	bf00      	nop
 8003b00:	200002b0 	.word	0x200002b0
 8003b04:	e000ed04 	.word	0xe000ed04

08003b08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	e00c      	b.n	8003b2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <prvInitialiseTaskLists+0x60>)
 8003b20:	4413      	add	r3, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fb4b 	bl	80031be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d9ef      	bls.n	8003b14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b34:	480d      	ldr	r0, [pc, #52]	; (8003b6c <prvInitialiseTaskLists+0x64>)
 8003b36:	f7ff fb42 	bl	80031be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b3a:	480d      	ldr	r0, [pc, #52]	; (8003b70 <prvInitialiseTaskLists+0x68>)
 8003b3c:	f7ff fb3f 	bl	80031be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <prvInitialiseTaskLists+0x6c>)
 8003b42:	f7ff fb3c 	bl	80031be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b46:	480c      	ldr	r0, [pc, #48]	; (8003b78 <prvInitialiseTaskLists+0x70>)
 8003b48:	f7ff fb39 	bl	80031be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b4c:	480b      	ldr	r0, [pc, #44]	; (8003b7c <prvInitialiseTaskLists+0x74>)
 8003b4e:	f7ff fb36 	bl	80031be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <prvInitialiseTaskLists+0x78>)
 8003b54:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <prvInitialiseTaskLists+0x64>)
 8003b56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <prvInitialiseTaskLists+0x7c>)
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <prvInitialiseTaskLists+0x68>)
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200002b0 	.word	0x200002b0
 8003b6c:	2000033c 	.word	0x2000033c
 8003b70:	20000350 	.word	0x20000350
 8003b74:	2000036c 	.word	0x2000036c
 8003b78:	20000380 	.word	0x20000380
 8003b7c:	20000398 	.word	0x20000398
 8003b80:	20000364 	.word	0x20000364
 8003b84:	20000368 	.word	0x20000368

08003b88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b8e:	e019      	b.n	8003bc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b90:	f000 fa24 	bl	8003fdc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <prvCheckTasksWaitingTermination+0x4c>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fb96 	bl	80032d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <prvCheckTasksWaitingTermination+0x50>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <prvCheckTasksWaitingTermination+0x50>)
 8003bae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <prvCheckTasksWaitingTermination+0x54>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <prvCheckTasksWaitingTermination+0x54>)
 8003bb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bba:	f000 fa3d 	bl	8004038 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f80e 	bl	8003be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <prvCheckTasksWaitingTermination+0x54>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e1      	bne.n	8003b90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000380 	.word	0x20000380
 8003bd8:	200003ac 	.word	0x200003ac
 8003bdc:	20000394 	.word	0x20000394

08003be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fb8e 	bl	8004318 <vPortFree>
				vPortFree( pxTCB );
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fb8b 	bl	8004318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c02:	e017      	b.n	8003c34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d103      	bne.n	8003c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fb82 	bl	8004318 <vPortFree>
	}
 8003c14:	e00e      	b.n	8003c34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d009      	beq.n	8003c34 <prvDeleteTCB+0x54>
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e7fe      	b.n	8003c32 <prvDeleteTCB+0x52>
	}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <prvResetNextTaskUnblockTime+0x44>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <prvResetNextTaskUnblockTime+0x14>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <prvResetNextTaskUnblockTime+0x16>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <prvResetNextTaskUnblockTime+0x48>)
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c5e:	e008      	b.n	8003c72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <prvResetNextTaskUnblockTime+0x44>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <prvResetNextTaskUnblockTime+0x48>)
 8003c70:	6013      	str	r3, [r2, #0]
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000364 	.word	0x20000364
 8003c84:	200003cc 	.word	0x200003cc

08003c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <xTaskGetSchedulerState+0x34>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c96:	2301      	movs	r3, #1
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	e008      	b.n	8003cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <xTaskGetSchedulerState+0x38>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	e001      	b.n	8003cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cae:	687b      	ldr	r3, [r7, #4]
	}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	200003b8 	.word	0x200003b8
 8003cc0:	200003d4 	.word	0x200003d4

08003cc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003cce:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff faf9 	bl	80032d2 <uxListRemove>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	2201      	movs	r2, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d10a      	bne.n	8003d1c <prvAddCurrentTaskToDelayedList+0x58>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	481a      	ldr	r0, [pc, #104]	; (8003d80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d16:	f7ff fa7f 	bl	8003218 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d1a:	e026      	b.n	8003d6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d209      	bcs.n	8003d48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7ff fa8d 	bl	8003260 <vListInsert>
}
 8003d46:	e010      	b.n	8003d6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7ff fa83 	bl	8003260 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d202      	bcs.n	8003d6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	6013      	str	r3, [r2, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200003b0 	.word	0x200003b0
 8003d78:	200002ac 	.word	0x200002ac
 8003d7c:	200003b4 	.word	0x200003b4
 8003d80:	20000398 	.word	0x20000398
 8003d84:	20000368 	.word	0x20000368
 8003d88:	20000364 	.word	0x20000364
 8003d8c:	200003cc 	.word	0x200003cc

08003d90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f023 0201 	bic.w	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3b04      	subs	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <pxPortInitialiseStack+0x64>)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3b14      	subs	r3, #20
 8003dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b04      	subs	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f06f 0202 	mvn.w	r2, #2
 8003dde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b20      	subs	r3, #32
 8003de4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003de6:	68fb      	ldr	r3, [r7, #12]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	08003df9 	.word	0x08003df9

08003df8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <prvTaskExitError+0x50>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d009      	beq.n	8003e20 <prvTaskExitError+0x28>
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e7fe      	b.n	8003e1e <prvTaskExitError+0x26>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e32:	bf00      	nop
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0fc      	beq.n	8003e34 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	00000000 	.word	0x00000000

08003e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <pxCurrentTCBConst2>)
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	6808      	ldr	r0, [r1, #0]
 8003e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	f380 8809 	msr	PSP, r0
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	4770      	bx	lr
 8003e6c:	f3af 8000 	nop.w

08003e70 <pxCurrentTCBConst2>:
 8003e70:	200002ac 	.word	0x200002ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop

08003e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e78:	4808      	ldr	r0, [pc, #32]	; (8003e9c <prvPortStartFirstTask+0x24>)
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	6800      	ldr	r0, [r0, #0]
 8003e7e:	f380 8808 	msr	MSP, r0
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f380 8814 	msr	CONTROL, r0
 8003e8a:	b662      	cpsie	i
 8003e8c:	b661      	cpsie	f
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	df00      	svc	0
 8003e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e9a:	bf00      	nop
 8003e9c:	e000ed08 	.word	0xe000ed08

08003ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ea6:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <xPortStartScheduler+0x118>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a44      	ldr	r2, [pc, #272]	; (8003fbc <xPortStartScheduler+0x11c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d109      	bne.n	8003ec4 <xPortStartScheduler+0x24>
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e7fe      	b.n	8003ec2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ec4:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <xPortStartScheduler+0x118>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a3d      	ldr	r2, [pc, #244]	; (8003fc0 <xPortStartScheduler+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d109      	bne.n	8003ee2 <xPortStartScheduler+0x42>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e7fe      	b.n	8003ee0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ee2:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <xPortStartScheduler+0x124>)
 8003ee4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	22ff      	movs	r2, #255	; 0xff
 8003ef2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <xPortStartScheduler+0x128>)
 8003f08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f0a:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f10:	e009      	b.n	8003f26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003f12:	4b2e      	ldr	r3, [pc, #184]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003f1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d0ef      	beq.n	8003f12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f32:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d009      	beq.n	8003f52 <xPortStartScheduler+0xb2>
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	e7fe      	b.n	8003f50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	4a1c      	ldr	r2, [pc, #112]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003f5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003f66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f70:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <xPortStartScheduler+0x130>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <xPortStartScheduler+0x130>)
 8003f76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <xPortStartScheduler+0x130>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <xPortStartScheduler+0x130>)
 8003f82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f88:	f000 f8d6 	bl	8004138 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f92:	f000 f8f5 	bl	8004180 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <xPortStartScheduler+0x138>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a0f      	ldr	r2, [pc, #60]	; (8003fd8 <xPortStartScheduler+0x138>)
 8003f9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003fa0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fa2:	f7ff ff69 	bl	8003e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fa6:	f7ff fd3d 	bl	8003a24 <vTaskSwitchContext>
	prvTaskExitError();
 8003faa:	f7ff ff25 	bl	8003df8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	e000ed00 	.word	0xe000ed00
 8003fbc:	410fc271 	.word	0x410fc271
 8003fc0:	410fc270 	.word	0x410fc270
 8003fc4:	e000e400 	.word	0xe000e400
 8003fc8:	200003d8 	.word	0x200003d8
 8003fcc:	200003dc 	.word	0x200003dc
 8003fd0:	e000ed20 	.word	0xe000ed20
 8003fd4:	2000000c 	.word	0x2000000c
 8003fd8:	e000ef34 	.word	0xe000ef34

08003fdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <vPortEnterCritical+0x54>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <vPortEnterCritical+0x54>)
 8003ffc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <vPortEnterCritical+0x54>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10e      	bne.n	8004024 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <vPortEnterCritical+0x58>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <vPortEnterCritical+0x48>
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	e7fe      	b.n	8004022 <vPortEnterCritical+0x46>
	}
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	2000000c 	.word	0x2000000c
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <vPortExitCritical+0x4c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <vPortExitCritical+0x22>
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	e7fe      	b.n	8004058 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <vPortExitCritical+0x4c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3b01      	subs	r3, #1
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <vPortExitCritical+0x4c>)
 8004062:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <vPortExitCritical+0x4c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <vPortExitCritical+0x3e>
 800406c:	2300      	movs	r3, #0
 800406e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c
	...

08004090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004090:	f3ef 8009 	mrs	r0, PSP
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <pxCurrentTCBConst>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	f01e 0f10 	tst.w	lr, #16
 80040a0:	bf08      	it	eq
 80040a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040aa:	6010      	str	r0, [r2, #0]
 80040ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040b4:	f380 8811 	msr	BASEPRI, r0
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f7ff fcb0 	bl	8003a24 <vTaskSwitchContext>
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f380 8811 	msr	BASEPRI, r0
 80040cc:	bc09      	pop	{r0, r3}
 80040ce:	6819      	ldr	r1, [r3, #0]
 80040d0:	6808      	ldr	r0, [r1, #0]
 80040d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d6:	f01e 0f10 	tst.w	lr, #16
 80040da:	bf08      	it	eq
 80040dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040e0:	f380 8809 	msr	PSP, r0
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	f3af 8000 	nop.w

080040f0 <pxCurrentTCBConst>:
 80040f0:	200002ac 	.word	0x200002ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop

080040f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004110:	f7ff fbcc 	bl	80038ac <xTaskIncrementTick>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <xPortSysTickHandler+0x3c>)
 800411c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	2300      	movs	r3, #0
 8004124:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <vPortSetupTimerInterrupt+0x34>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <vPortSetupTimerInterrupt+0x38>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <vPortSetupTimerInterrupt+0x3c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <vPortSetupTimerInterrupt+0x40>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	099b      	lsrs	r3, r3, #6
 8004154:	4a09      	ldr	r2, [pc, #36]	; (800417c <vPortSetupTimerInterrupt+0x44>)
 8004156:	3b01      	subs	r3, #1
 8004158:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800415a:	4b04      	ldr	r3, [pc, #16]	; (800416c <vPortSetupTimerInterrupt+0x34>)
 800415c:	2207      	movs	r2, #7
 800415e:	601a      	str	r2, [r3, #0]
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000e010 	.word	0xe000e010
 8004170:	e000e018 	.word	0xe000e018
 8004174:	20000000 	.word	0x20000000
 8004178:	10624dd3 	.word	0x10624dd3
 800417c:	e000e014 	.word	0xe000e014

08004180 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004180:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004190 <vPortEnableVFP+0x10>
 8004184:	6801      	ldr	r1, [r0, #0]
 8004186:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800418a:	6001      	str	r1, [r0, #0]
 800418c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800418e:	bf00      	nop
 8004190:	e000ed88 	.word	0xe000ed88

08004194 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041a0:	f7ff fada 	bl	8003758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041a4:	4b57      	ldr	r3, [pc, #348]	; (8004304 <pvPortMalloc+0x170>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041ac:	f000 f90c 	bl	80043c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041b0:	4b55      	ldr	r3, [pc, #340]	; (8004308 <pvPortMalloc+0x174>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f040 808c 	bne.w	80042d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01c      	beq.n	80041fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80041c4:	2208      	movs	r2, #8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d013      	beq.n	80041fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f023 0307 	bic.w	r3, r3, #7
 80041dc:	3308      	adds	r3, #8
 80041de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <pvPortMalloc+0x6a>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e7fe      	b.n	80041fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d068      	beq.n	80042d6 <pvPortMalloc+0x142>
 8004204:	4b41      	ldr	r3, [pc, #260]	; (800430c <pvPortMalloc+0x178>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d863      	bhi.n	80042d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800420e:	4b40      	ldr	r3, [pc, #256]	; (8004310 <pvPortMalloc+0x17c>)
 8004210:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004212:	4b3f      	ldr	r3, [pc, #252]	; (8004310 <pvPortMalloc+0x17c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004218:	e004      	b.n	8004224 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d903      	bls.n	8004236 <pvPortMalloc+0xa2>
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f1      	bne.n	800421a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004236:	4b33      	ldr	r3, [pc, #204]	; (8004304 <pvPortMalloc+0x170>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	429a      	cmp	r2, r3
 800423e:	d04a      	beq.n	80042d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2208      	movs	r2, #8
 8004246:	4413      	add	r3, r2
 8004248:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	1ad2      	subs	r2, r2, r3
 800425a:	2308      	movs	r3, #8
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	429a      	cmp	r2, r3
 8004260:	d91e      	bls.n	80042a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <pvPortMalloc+0xf4>
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	e7fe      	b.n	8004286 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800429a:	69b8      	ldr	r0, [r7, #24]
 800429c:	f000 f8f6 	bl	800448c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <pvPortMalloc+0x178>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	4a18      	ldr	r2, [pc, #96]	; (800430c <pvPortMalloc+0x178>)
 80042ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042ae:	4b17      	ldr	r3, [pc, #92]	; (800430c <pvPortMalloc+0x178>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <pvPortMalloc+0x180>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d203      	bcs.n	80042c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <pvPortMalloc+0x178>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a15      	ldr	r2, [pc, #84]	; (8004314 <pvPortMalloc+0x180>)
 80042c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <pvPortMalloc+0x174>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042d6:	f7ff fa4d 	bl	8003774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <pvPortMalloc+0x164>
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e7fe      	b.n	80042f6 <pvPortMalloc+0x162>
	return pvReturn;
 80042f8:	69fb      	ldr	r3, [r7, #28]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000fe8 	.word	0x20000fe8
 8004308:	20000ff4 	.word	0x20000ff4
 800430c:	20000fec 	.word	0x20000fec
 8004310:	20000fe0 	.word	0x20000fe0
 8004314:	20000ff0 	.word	0x20000ff0

08004318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d046      	beq.n	80043b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800432a:	2308      	movs	r3, #8
 800432c:	425b      	negs	r3, r3
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4413      	add	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <vPortFree+0xa8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <vPortFree+0x42>
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e7fe      	b.n	8004358 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <vPortFree+0x5e>
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	e7fe      	b.n	8004374 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <vPortFree+0xa8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d019      	beq.n	80043b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d115      	bne.n	80043b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortFree+0xa8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	43db      	mvns	r3, r3
 8004396:	401a      	ands	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800439c:	f7ff f9dc 	bl	8003758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <vPortFree+0xac>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4413      	add	r3, r2
 80043aa:	4a06      	ldr	r2, [pc, #24]	; (80043c4 <vPortFree+0xac>)
 80043ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043ae:	6938      	ldr	r0, [r7, #16]
 80043b0:	f000 f86c 	bl	800448c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043b4:	f7ff f9de 	bl	8003774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043b8:	bf00      	nop
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000ff4 	.word	0x20000ff4
 80043c4:	20000fec 	.word	0x20000fec

080043c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043d4:	4b27      	ldr	r3, [pc, #156]	; (8004474 <prvHeapInit+0xac>)
 80043d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3307      	adds	r3, #7
 80043e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0307 	bic.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <prvHeapInit+0xac>)
 80043f8:	4413      	add	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <prvHeapInit+0xb0>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <prvHeapInit+0xb0>)
 8004408:	2200      	movs	r2, #0
 800440a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4413      	add	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004414:	2208      	movs	r2, #8
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0307 	bic.w	r3, r3, #7
 8004422:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4a15      	ldr	r2, [pc, #84]	; (800447c <prvHeapInit+0xb4>)
 8004428:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800442a:	4b14      	ldr	r3, [pc, #80]	; (800447c <prvHeapInit+0xb4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <prvHeapInit+0xb4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <prvHeapInit+0xb4>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <prvHeapInit+0xb8>)
 8004456:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a09      	ldr	r2, [pc, #36]	; (8004484 <prvHeapInit+0xbc>)
 800445e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <prvHeapInit+0xc0>)
 8004462:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004466:	601a      	str	r2, [r3, #0]
}
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	200003e0 	.word	0x200003e0
 8004478:	20000fe0 	.word	0x20000fe0
 800447c:	20000fe8 	.word	0x20000fe8
 8004480:	20000ff0 	.word	0x20000ff0
 8004484:	20000fec 	.word	0x20000fec
 8004488:	20000ff4 	.word	0x20000ff4

0800448c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004494:	4b28      	ldr	r3, [pc, #160]	; (8004538 <prvInsertBlockIntoFreeList+0xac>)
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e002      	b.n	80044a0 <prvInsertBlockIntoFreeList+0x14>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d8f7      	bhi.n	800449a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	4413      	add	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d108      	bne.n	80044ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	441a      	add	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d118      	bne.n	8004514 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <prvInsertBlockIntoFreeList+0xb0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d00d      	beq.n	800450a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	e008      	b.n	800451c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <prvInsertBlockIntoFreeList+0xb0>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e003      	b.n	800451c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d002      	beq.n	800452a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000fe0 	.word	0x20000fe0
 800453c:	20000fe8 	.word	0x20000fe8

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4e0d      	ldr	r6, [pc, #52]	; (8004578 <__libc_init_array+0x38>)
 8004544:	4c0d      	ldr	r4, [pc, #52]	; (800457c <__libc_init_array+0x3c>)
 8004546:	1ba4      	subs	r4, r4, r6
 8004548:	10a4      	asrs	r4, r4, #2
 800454a:	2500      	movs	r5, #0
 800454c:	42a5      	cmp	r5, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	4e0b      	ldr	r6, [pc, #44]	; (8004580 <__libc_init_array+0x40>)
 8004552:	4c0c      	ldr	r4, [pc, #48]	; (8004584 <__libc_init_array+0x44>)
 8004554:	f000 f820 	bl	8004598 <_init>
 8004558:	1ba4      	subs	r4, r4, r6
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	2500      	movs	r5, #0
 800455e:	42a5      	cmp	r5, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004568:	4798      	blx	r3
 800456a:	3501      	adds	r5, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004572:	4798      	blx	r3
 8004574:	3501      	adds	r5, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	08004610 	.word	0x08004610
 800457c:	08004610 	.word	0x08004610
 8004580:	08004610 	.word	0x08004610
 8004584:	08004614 	.word	0x08004614

08004588 <memset>:
 8004588:	4402      	add	r2, r0
 800458a:	4603      	mov	r3, r0
 800458c:	4293      	cmp	r3, r2
 800458e:	d100      	bne.n	8004592 <memset+0xa>
 8004590:	4770      	bx	lr
 8004592:	f803 1b01 	strb.w	r1, [r3], #1
 8004596:	e7f9      	b.n	800458c <memset+0x4>

08004598 <_init>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr

080045a4 <_fini>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	bf00      	nop
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr
